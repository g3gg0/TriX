
#ifndef __TRIX_CRYPTO_H__
#define __TRIX_CRYPTO_H__

typedef struct s_crypt_key t_crypt_key;
struct s_crypt_key
{
	unsigned char id;
	char *name;
	char *primefac;
	char *key;
};


#define TRIXCRYPT_HEADER  0xDDEEAAFF
#define TRIXCRYPT_TRAILER 0xFFEEAADD

#define TRIXCRYPT_ALGO_AES256  0xAE500100

typedef struct s_crypt_header t_crypt_header;
struct s_crypt_header
{
	unsigned int header;
	unsigned int length;
	unsigned char keydata[64];
	unsigned int algorithm;
	unsigned int trailer;
};


#include "trixplug_crypto.h"
int crypto_unfold ( char **in_data, int length, t_crypt_key *keys );
char *crypto_check_integrity ( char **in_data, int length, t_crypt_key *key );
char *crypto_generate_cert ( char *data, int length, char *signature, t_crypt_key *key );
char *crypto_get_signer ( char *signature );
char *crypto_get_signee ( char *signature );
char *crypto_get_signkey ( char *signature );
char *crypto_get_signopt ( char *signature );

unsigned int crypto_generate_key ( int bits, t_crypt_key *priv_key, t_crypt_key *pub_key );
unsigned int crypto_generate_sha1 ( const unsigned char *data, unsigned int length, char *hash );
unsigned int crypto_generate_md5 ( const unsigned char *data, unsigned int length, char *hash );
unsigned int crypto_crypt ( unsigned char *data, int length, t_crypt_key *key );
unsigned char *crypto_encrypt_buffer ( unsigned char *buffer, int *length, t_crypt_key *key );
unsigned char *crypto_decrypt_buffer ( unsigned char *buffer, int *length, t_crypt_key *key );

t_crypt_key *crypto_get_key ( unsigned char key_id, t_crypt_key * keys);
char *crypto_get_keyname ( unsigned char key_id, t_crypt_key * keys);

unsigned int crypto_init_algokey ( unsigned char *algokey_data, unsigned int algokey_length, t_crypt_key *rsa_key );
unsigned int crypto_init_algoiv ( unsigned char *algoiv_data, unsigned int algoiv_length, t_crypt_key *rsa_key );

#define TRIX_PUBLIC_KEYS { \
    { 0x00, "TriX default key", "00000001C5DA99938F30CCA64081ED644A88DEC4E6CFE98A9D4166E278DB5CAD0885BD82CACBB1770E94E5129139BDF9F1A8DA2FC8076A85D81E02EA7168FF0BA59EF11DB4FE1867E52971F2A52C038931B289C8CFB5955D62A768B344EAB66D8B8421B6FDA6A4118173F81ECE2AE5DA68C676893272A5D63744496D09927B837F71BE11", "D51DAB3F9DD01036C901C6055C2B76DA433AF6D16C19C8256B7BD5994EEC6922BE1970D8595DF21E4E8FCB0F3909AD2A3FFB5A406CF01C9C4B9F8773C5F6751B" },\
    { 0x01, "krisha private", "000000013818A3EC0659A6F63232B571817729BED076BFF05F6CC6488C233421FDBF8502771767AF239BA5D7ACABAB57A1929A0FE6250BEEBF4E085CD80FEE9326A9B33BCD55FF48757C12E263D7466CAF029E1D75CC8E2EA2D2C116101195051ED5D0E0D6A2AD1D2DD5F431BA3CAC55341F99CAAE00DD6E2AAEE2E100B66D468CB765A6E293BA39FB180B502727C0DC9B91FD344C669485482157729CFC9CB10217677A5068FF3E27B42F62680863DD209C85A5814517A9B10E238C161502672DDDA418AFF019F131CD26FBC785F6EE0B89405E10F0AE33A0A0B692540097DE45AE7498FA168B99CB5B81222B9668D991BCD2262024CBE57991B0BB09B51B26B1FB1D49", "D29FA328660556D70F7AB5A03F3C7CA938C7FD926ADA1D1E91C6902209FD57AC72D879768CAA008C4A05353B3B4A1E3C1976371FB1296EFCF4F963575CF8DF5283829418004A168884A619203419EA2B4720322CE140E88C314F9581C800CE403BB4ED66FB7E11A2737657A66141594E78DFE61135B601A600DE1EF986AE9D75" }, \
    { 0x02, "g3gg0 private", "00000001A9118BE1CBC2132B63DF26FA074EF9E353A36631B9C0902FDE6A9A555B6B4517BB1C90ADD41AAECBE9D2466997FCBA97ACBBFEC4152233E150881056117B9750B258DABE40F8EE002340D1CA27AF6BD1D12CC274981BD8B6791B86B62002B8CE80AE72EAC89011BF6B22C5B69E6894A0EA987060B67DB4C7464A347B1BF19FBEAFD4EBAC01FBC840BE8D99779C8E58F36E83E07299B0760C39D021C626081125AB86C1C0132E7FDFF001A284485030A3EC30C6012AD91699F24A5A61BA5105F6B02DC51B12741D5158BDBC91909214478BB3AD7F247D9B5EF646FCECFF554DF342D9EDD0DFD4DAD0324A23B6526146FCCFD2653F6D5E208744FC16935B5B6E81", "C0CA8F546E73F64B0D3D7368C87D1063B368E1EFE1DDBF2A45704B44C7BA216EAADE5A031C5E46FB1C1F698E93B8B627AC01098A75DAE948BB3B7E61207BCF3980E33FC0857548DB87F87717A746AA902ED8881E219041C028C8854C9F9BC857FB71B66062D0F343846016DBBE3DE6F87083D6829D16BDEDC3B1D9DEFC300D55" }, \
    { 0x03, "ndt private", "000000018F8D07EE6015D0A924768D8CCF8C2AA6A81F9F5E115016220EFC4D12EB5E0D2EF87EFA8551E76710905174AEACD8564879F3439808F23F5CDF1ECB4E9AD631E250B2F671AEE4DB3F28B718ECA5ED05D9D8AFA4E931D33EC55BFF3534D1CDDC4ADD0DEAD040BA71C36BF6ECE625C7EC88828EC2BB30BE1984CBA082FA556CFA011AEFF78D5BCF5574143391B5E56EB37949ED75774958B1F321BF8C6525A685A8EE53E1A3F2078B0E98E112380F1A26DA2343E75441B4E660A7DDEB3FEDB2510747CB3CE818FF62BDD6E9DA15898E93FF4C5449A6B731B0631AA3B6D39C848DFEF7BDB4C6D1DE0623782F543D5AA8CE1C22474C38F79E60FE94BE5016FF2AC61D", "C62BB388FBCA355226744710109FD01A2C4BE16662FB5EA25EF0ED9318A71EACA695DBF0401F110B92DE9EAD48137C28D6662E4C87E56981C83B0525B42F2427E15FA3E26B3DC03E41480C03AE8D917E295F46595F54B2B68082DE8DC9FA7F4651836298169A19A249A9E64AD885E7D43B2C82C582BF11F99EBCD001EE7E1177" }, \
    { 0xFF, NULL, NULL, NULL } }


#endif

