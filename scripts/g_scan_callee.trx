
char *GENIO[] = {
	"0x00 - VEN of LP3985 VoltReg  ",
	"0x01                          ",
	"0x02 - Key 5 (3100)           ",
	"0x03 - FM Radio Clock         ",
	"0x04 - LCD Reset              ",
	"0x05 - RF TXPower             ",
	"0x06 - RF Reset               ",
	"0x07 - RF TXA                 ",
	"0x08 - RF TXL 1   &  FM Enable",
	"0x09 - RF Mode                ",
	"0x0A - RF EXTANT  &  IR SD Pin",
	"0x0B - RF BANDSEL &  FM SClk  ",
	"0x0C - RF AData   &  FM SData ",
	"0x0D - RF RXGain              ",
	"0x0E - Audio Router Enable    ",
	"0x0F - Audio Router Clock     ",
	"0x10 - Audio Router Data      ",
	"0x11                          ",
	"0x12                          ",
	"0x13                          ",
	"0x14                          ",
	"0x15                          ",
	"0x16                          ",
	"0x17 - WP of flash            ",
	"0x18                          ",
	"0x19                          ",
	"0x1A                          ",
	"0x1B                          ",
	"0x1C                          ",
	"0x1D - SIMCLKI                ",
	"0x1E - SIMIOCTRL              ",
	"0x1F - SIMDATA                ",
	"0x30                          "
};

int g_test_performance ()
{
	int num = 100;

	while ( num-- )
			SimpleFindPattern ( "crap", NULL, 4, 0 );

	return 0;
}

int g_find_java ()
{
	int start = MEM_AUTO;

	while ( start != E_FAIL )
	{
		start = QuickFindPattern ( "nokia/", NULL, 6, start, MEM_MAX, 0 );
		if ( start != E_FAIL )
		{
			printf ( "found at 0x%08X : '%s'\n", start, GetStr ( start ) );
			start++;
		}
	}
	printf ( "nothing more....\n" );

	return 0;

}

int g_scan_movl ()
{
	int offset = MEM_AUTO;
	int movreg = 0;
	int movval = 0;
	int lslregd = 0;
	int lslregs = 0;
	int lslshift = 0;
	int value = 0;


	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
		offset = QuickFindPattern ( 
			"\x20\x00\x01\x00",
			"\xF8\x00\xF8\x00",
			4, offset, MEM_AUTO, 0 );
		if ( offset != E_FAIL )
		{
			movreg = GetByte ( offset ) & 0x07;
			movval = GetByte ( offset +1 );
			
			lslregd = GetHalf ( offset + 2 ) & 0x07;
			lslregs = (GetHalf ( offset + 2 ) >> 3) & 0x07;
			lslshift = (GetHalf ( offset + 2 ) >> 6) & 0x1F;
			if ( movreg == lslregs )
			{
				value = movval<<lslshift;
				printf ( "  Address: 0x%08X   MOVL R%i, 0x%08X\n", offset, lslregd, value );
				if ( (value & 0xFFFFFFFF) == 0x08000000 )
				{
					if ( (GetHalf ( offset + 4 ) & 0xF800) == 0x0800 )
					{
						printf ( "LSR\n" );
						movreg = lslregd;
						lslregd = GetHalf ( offset + 4 ) & 0x07;
						lslregs = (GetHalf ( offset + 4 ) >> 3) & 0x07;
						lslshift = (GetHalf ( offset + 4 ) >> 6) & 0x1F;
						if ( lslregs != movreg )
							getchar();
					}
					else
						getchar();
				}
			}
			offset++;
		}
	}

	printf ( "nothing more....\n" );

	return 0;
}


int g_scan_address ()
{
	int offset = MEM_AUTO;

	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
		offset = QuickFindPattern ( 
			"\x01\x50\xCD\x6C",
			"\xFF\xFF\xF0\x00",
			4, offset, MEM_AUTO, 0 );
		if ( offset != E_FAIL )
		{
			printf ( "  Address: 0x%08X -> 0x%08X \n", offset, GetWord ( offset ) );
			offset++;
		}
	}

	printf ( "nothing more....\n" );

	return 0;
}


int g_scan_callee ()
{
	int offset = MEM_AUTO;
	int pos = 0;
	int xref = 0;
	int function = 0x01101CB2;
	int spi_command = 0x01102360;
	int spi_data = 0x01102334;
	int scanback = 5;

	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
        offset = ARMFindSrcOfDest ( BL, function, offset, MEM_AUTO, LOC_FORWARD );
		if ( offset != E_FAIL )
		{
			printf ( "Found at 0x%08X\n", offset );
			pos = 1;
			while ( pos <= scanback )
			{
				if ( GetByte ( offset - pos*2 ) == 0x20 )
				{
					printf ( "  Address: 0x%08X", offset - pos*2 );
					printf ( "  Data:    R0 = 0x%02X\n", GetByte ( offset - pos*2 + 1 ));
				}
				pos++;
			}
			offset++;
		}
	}

	return 0;

	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
        offset = ARMFindSrcOfDest ( BL, spi_command, offset, MEM_AUTO, LOC_FORWARD );
		if ( offset != E_FAIL )
		{
			pos = 1;
			while ( pos <= scanback )
			{
				if ( GetByte ( offset - pos*2 ) == 0x20 )
				{
					printf ( "  Address: 0x%08X", offset-2 );
					printf ( "  Data:    R0 = 0x02X\n", GetByte ( offset - pos*2 + 1 ));
				}
				else
					printf ( "  Address: 0x%08X", offset-2 );
				pos++;
			}
			offset++;
		}
	}

	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
        offset = ARMFindSrcOfDest ( BL, spi_data, offset, MEM_AUTO, LOC_FORWARD );
		if ( offset != E_FAIL )
		{
			if ( GetByte ( offset - 2 ) != 0x20 )
			{
				printf ( "  Address: 0x%08X", offset-2 );
				printf ( "  Data:    0x%04X\n", GetHalf ( offset - 2 ));
			}
			offset++;
		}
	}

	printf ( "nothing more....\n" );

//	getchar();*/
	return 0;
}


int g_scan_irqs ()
{
	int offset = MEM_AUTO;
	int pos = 0;
	int function = 0;
	int scanback = 5;
	
	nokia_known_funcs ();
	
	function = SymbolGetInt( "register_irq" );
	//function = 0x0126B9EE;//0x01101CB2;

	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
        offset = ARMFindSrcOfDest ( BL, function, offset, MEM_AUTO, LOC_FORWARD );
		if ( offset != E_FAIL )
		{
			printf ( "Found at 0x%08X\n", offset );
			pos = 1;
			while ( pos <= scanback )
			{
				if ( GetByte ( offset - pos*2 ) == 0x20 )
				{
					printf ( "  Address: 0x%08X", offset - pos*2 );
					printf ( "  Registering IRQ #%02X\n", GetByte ( offset - pos*2 + 1 ));
				}
				pos++;
			}
			offset++;
		}
	}

	return 0;

}



int g_scan_fiqs ()
{
	int offset = MEM_AUTO;
	int pos = 0;
	int scanback = 5;
	int function = 0x0132F9A8;

	if ( function == E_FAIL )
	{
		say ( "Error finding function\n" );
		return 0;
	}

	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
        offset = ARMFindSrcOfDest ( BL, function, offset, MEM_AUTO, LOC_FORWARD );
		if ( offset != E_FAIL )
		{
			printf ( "Found at 0x%08X\n", offset );
			pos = 1;
			while ( pos <= scanback )
			{
				if ( GetByte ( offset - pos*2 ) == 0x20 )
				{
					printf ( "  Address: 0x%08X", offset - pos*2 );
					printf ( "  Registering FIQ #%02X\n", GetByte ( offset - pos*2 + 1 ));
				}
				pos++;
			}
			offset++;
		}
	}

	return 0;

}


int
g_scan_int_new ( int fiq, int ida_out )
{
	int pos[16];
	int i = 0;
	int scanback = 500;
	unsigned int registers[32];
	unsigned char reg = 0;
	int relative = 0;
	int offset = 0;
	unsigned char *buffer = NULL;
	unsigned int start_address = 0;
	int function = 0;

	buffer = malloc ( 8192 );

	if ( !fiq )
		function = SymbolGetInt( "register_irq" );
	else
		function = SymbolGetInt( "register_fiq" );

	if ( function == E_FAIL )
	{
		say ( "Error finding function\n" );
		return 0;
	}
	if ( ida_out )
	{
		printf ( "\n\n" );
		printf ( "IDA Script output:\n" );
		printf ( "-------------------------------------\n" );
		printf ( "#include <idc.idc>\n" );
 		printf ( "static main()\n" );
 		printf ( "{\n" );
	}

	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
        offset = ARMFindSrcOfDest ( BL, function, offset, MEM_AUTO, LOC_FORWARD );
		if ( offset != E_FAIL )
		{
			for ( reg = 0; reg < 8; reg++ )
			{
				pos[reg] = 1;
				registers[reg] = 0xDEADBEEF;

				while ( pos[reg] <= scanback && registers[reg] == 0xDEADBEEF )
				{
					if ( GetByte ( offset - pos[reg]*2 ) == 0xB5 )
					{
						if ( ida_out && (start_address !=  offset - pos[reg]*2) )
						{
//							printf ( "    MakeFunction ( 0x%08X, BADADDR );\n", offset - pos[reg]*2 );
							start_address = offset - pos[reg]*2;
						}

//						pos[reg] = scanback;
					}
					if ( GetByte ( offset - pos[reg]*2 ) == (0x20|reg) )
						registers[reg] = GetByte ( offset - pos[reg]*2 + 1 );
					if ( GetByte ( offset - pos[reg]*2 ) == (0x48|reg) )
					{
						relative = GetByte ( offset - pos[reg]*2 + 1 );
						registers[reg] = GetWord ( ((offset - pos[reg]*2)&0xFFFFFFFC)+4+4*relative );
					}
					if ( GetByte ( offset - pos[reg]*2 ) == (0xA0|reg) )
					{
						relative = GetByte ( offset - pos[reg]*2 + 1 );
						registers[reg] = ((offset - pos[reg]*2)&0xFFFFFFFC)+4+4*relative;
					}
					pos[reg]++;
				}
//				printf ( "\n I  R%i = %08X  pos = %i", reg, registers[reg], pos[reg] );
			}

			for ( reg = 0; reg < 8; reg++ )
			{
				while ( pos[reg] )
				{
					if ( GetByte ( offset - pos[reg]*2 ) == 0x1C && (GetByte ( offset - pos[reg]*2 + 1 ) & 0x07) == reg )
					{
						relative = (GetByte ( offset - pos[reg]*2 + 1 )>>3) & 0x07;
						if ( pos[reg] < pos[relative] )
							registers[reg] = registers[relative];
					}
					// Format 1: logical shift left
					if ( (GetHalf ( offset - pos[reg]*2 ) & 0xF807) == (0x0000|reg) )
					{
						relative = ((GetHalf ( offset - pos[reg]*2 ) & 0x07C0)>>6);
						registers[reg] = registers[((GetHalf ( offset - pos[reg]*2 ) & 0x0038)>>3)]<<relative;
					}
					// Format 1: logical shift right
					if ( (GetHalf ( offset - pos[reg]*2 ) & 0xF807) == (0x0800|reg) )
					{
						relative = ((GetHalf ( offset - pos[reg]*2 ) & 0x07C0)>>6);
						registers[reg] = registers[((GetHalf ( offset - pos[reg]*2 ) & 0x0038)>>3)]>>relative;
					}
					if ( GetByte ( offset - pos[reg]*2 ) == (0x30|reg) )
						registers[reg] += GetByte ( offset - pos[reg]*2 + 1 );
					if ( GetByte ( offset - pos[reg]*2 ) == (0x38|reg) )
						registers[reg] -= GetByte ( offset - pos[reg]*2 + 1 );
					pos[reg]--;
				}
//				printf ( "\n II R%i = %08X  pos = %i", reg, registers[reg], pos[reg] );
			}

			if ( ida_out )
			{
				if ( (registers[2] & 0xFF00) != 0x0400 && !fiq )
					registers[2] = 0x0000;
				sprintf ( buffer, "hw_%s 0x%04X - prio 0x%02X - handler 0x%08X", (fiq?"fiq":"int"), registers[2], registers[0], registers[1] );
				printf ( "    MakeRptCmt ( 0x%08X, \"%s\" );\n", offset, buffer );
				if ( Valid ( registers[1] ) && (fiq || (registers[2] & 0xFF00) == 0x0400) )
				{
					if ( fiq )
						sprintf ( buffer, "hw_fiq_0x%04X_handler", registers[2] );
					else
						sprintf ( buffer, "hw_irq_0x%04X_handler", registers[2] );
					printf ( "    MakeFunction ( 0x%08X, BADADDR );\n", registers[1] & ~0x00000001 );
					printf ( "    MakeName ( 0x%08X, \"%s\" );\n", registers[1] & ~0x0000001, buffer );
				}
			}
			else
			{
				sprintf ( buffer, "0x%08X: hw_%s 0x%04X - prio %i", offset, (fiq?"fiq":"int"), registers[2], registers[0] );
				printf ( "buffer\n" );
			}
			offset++;
		}
	}

	if ( ida_out )
		printf ( "}\n" );

	free ( buffer );

	return 0;

}



int
locate_function_calls ( int function )
{
	int pos = 0;
	int scanback = 0x1000;
	int relative = 0;
	int offset = 0;
	unsigned int *start_address = NULL;
	int start_addresses = 0;

	start_address = malloc ( (start_addresses+1)*4 );

	if ( function == E_FAIL )
	{
		say ( "Error finding function\n" );
		return 0;
	}

	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
        offset = ARMFindSrcOfDest ( BL, function, offset, MEM_AUTO, LOC_FORWARD );
		if ( offset != E_FAIL )
		{
			printf ( "." );
			pos = 1;

			while ( pos <= scanback )
			{
				if ( GetByte ( offset - pos*2 ) == 0xB5 )
				{
					if ( start_address[start_addresses-1] !=  offset - pos*2 )
					{
						start_address[start_addresses++] =  offset - pos*2;
						start_address = realloc ( start_address, (start_addresses+1)*4 );
					}
					pos = scanback;
				}
				pos++;
			}
			offset++;
		}
	}

	printf ( "\n\n" );
	printf ( "IDA Script output:\n" );
	printf ( "-------------------------------------\n" );
	printf ( "#include <idc.idc>\n" );
 	printf ( "static main()\n" );
 	printf ( "{\n" );
	for ( pos = 0; pos < start_addresses; pos++ )
		printf ( "    MakeFunction ( 0x%08X, BADADDR );\n", start_address[pos] );
	printf ( "}\n" );
	printf ( "-------------------------------------\n" );


	return 0;

}



int
dump_assert_strings ( int ida_out, int type_8310 )
{
	int pos[16];
	int i = 0;
	int scanback = 500;
	unsigned int registers[32];
	unsigned char reg = 0;
	int relative = 0;
	int offset = 0;
	unsigned char *buffer = NULL;
	unsigned int start_address = 0;
	int function = SimpleFindPattern (  "\xB5\x70\x1C\x0C\x1C\x11\x1C\x06\x1C\x15\x1C\x20\xF7\x77\xFC\xE3\x1C\x33", 
										"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF8\x00\xF8\x00\xFF\xFF", 18, 0 );

	buffer = malloc ( 8192 );

	if ( type_8310 )
		function = 0x012F4758;

	if ( function == E_FAIL )
		function = 0x010D92A0;  // nokia 1100 RH-18
	if ( function == E_FAIL )
	{
		say ( "Error finding function\n" );
		return 0;
	}
	if ( ida_out )
	{
		printf ( "\n\n" );
		printf ( "IDA Script output:\n" );
		printf ( "-------------------------------------\n" );
		printf ( "#include <idc.idc>\n" );
 		printf ( "static main()\n" );
 		printf ( "{\n" );
	}
	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
        offset = ARMFindSrcOfDest ( BL, function, offset, MEM_AUTO, LOC_FORWARD );
		if ( offset != E_FAIL )
		{
			for ( reg = 0; reg < 8; reg++ )
			{
				pos[reg] = 1;
				registers[reg] = 0;

				while ( pos[reg] <= scanback && registers[reg] == 0 )
				{
					if ( GetByte ( offset - pos[reg]*2 ) == 0xB5 )
					{
						if ( ida_out && (start_address !=  offset - pos[reg]*2) )
						{
							printf ( "    MakeFunction ( 0x%08X, BADADDR );\n", offset - pos[reg]*2 );
							start_address = offset - pos[reg]*2;
						}

						pos[reg] = scanback;
					}
					if ( GetByte ( offset - pos[reg]*2 ) == (0x20|reg) )
						registers[reg] = GetByte ( offset - pos[reg]*2 + 1 );
					if ( GetByte ( offset - pos[reg]*2 ) == (0x48|reg) )
					{
						relative = GetByte ( offset - pos[reg]*2 + 1 );
						registers[reg] = GetWord ( ((offset - pos[reg]*2)&0xFFFFFFFC)+4+4*relative );
					}
					if ( GetByte ( offset - pos[reg]*2 ) == (0xA0|reg) )
					{
						relative = GetByte ( offset - pos[reg]*2 + 1 );
						registers[reg] = ((offset - pos[reg]*2)&0xFFFFFFFC)+4+4*relative;
					}
					pos[reg]++;
				}
//				printf ( "\n I  R%i = %08X  pos = %i", reg, registers[reg], pos[reg] );
			}

			for ( reg = 0; reg < 8; reg++ )
			{
				while ( pos[reg] )
				{
					if ( GetByte ( offset - pos[reg]*2 ) == 0x1C && (GetByte ( offset - pos[reg]*2 + 1 ) & 0x07) == reg )
					{
						relative = (GetByte ( offset - pos[reg]*2 + 1 )>>3) & 0x07;
						if ( pos[reg] < pos[relative] )
							registers[reg] = registers[relative];
					}
					if ( GetByte ( offset - pos[reg]*2 ) == (0x30|reg) )
						registers[reg] += GetByte ( offset - pos[reg]*2 + 1 );
					if ( GetByte ( offset - pos[reg]*2 ) == (0x38|reg) )
						registers[reg] -= GetByte ( offset - pos[reg]*2 + 1 );
					pos[reg]--;
				}
//				printf ( "\n II R%i = %08X  pos = %i", reg, registers[reg], pos[reg] );
			}

			if ( ida_out )
			{
				if ( type_8310 )
				{
					sprintf ( buffer, "%s",  GetStr ( registers[0] ) );
				}
				else
				{
					sprintf ( buffer, "%s - ",  GetStr ( registers[1] ) );
					strcat ( buffer, GetStr ( registers[0] ) );
				}

				for ( i = 0; i < strlen ( buffer ); i++ )
				{
					if ( buffer[i] == '"' )
						buffer[i] = '\'';
					if ( buffer[i] == '\n' )
						buffer[i] = ' ';
					if ( buffer[i] == '\r' )
						buffer[i] = ' ';
					if ( buffer[i] < ' ' )
						buffer[i] = ' ';
				}
				printf ( "    MakeRptCmt ( 0x%08X, \"%s\" );\n", offset, buffer );
			}
			else
			{
				printf ( "0x%08X: ", offset );
				if ( registers[1] )
					printf ( "ASSERT ( \"%s\", ", GetStr ( registers[1] ));
				else
					printf ( "ASSERT ( unknown, " );

				if ( registers[0] )
					printf ( "\"%s\" );", GetStr ( registers[0] ));
				else
					printf ( "unknown );" );

				printf ( "\n" );
			}
			offset += 2;
		}
	}

	if ( ida_out )
		printf ( "}\n" );

	free ( buffer );

	return 0;

}




int
dump_ostrich_strings (  )
{
	int pos[16];
	int scanback = 90;
	unsigned int registers[32];
	unsigned char reg = 0;
	int relative = 0;
	int offset = 0;
	unsigned int *start_address = NULL;
	int start_addresses = 0;
	int function = SimpleFindPattern (  "\xB5\x10\x1C\x0C\x22\x01\x06\x92\x04\x09\x18\x89\x22\xC0\x70\x0A", 
										"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF", 16, 0 );

	start_address = malloc ( (start_addresses+1)*4 );

	if ( function == E_FAIL )
		function = 0x010C9D60;  // nokia 1100 RH-18
	if ( function == E_FAIL )
	{
		say ( "Error finding function\n" );
		return 0;
	}

	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
        offset = ARMFindSrcOfDest ( BL, function, offset, MEM_AUTO, LOC_FORWARD );
		if ( offset != E_FAIL )
		{
			printf ( "0x%08X: ", offset );

			for ( reg = 0; reg < 8; reg++ )
			{
				pos[reg] = 1;
				registers[reg] = 0;

				while ( pos[reg] <= scanback && registers[reg] == 0 )
				{
					if ( GetByte ( offset - pos[reg]*2 ) == 0xB5 )
					{
						if ( start_address[start_addresses-1] !=  offset - pos[reg]*2 )
						{
							start_address[start_addresses++] =  offset - pos[reg]*2;
							start_address = realloc ( start_address, (start_addresses+1)*4 );
						}
						pos[reg] = scanback;
					}
					if ( GetByte ( offset - pos[reg]*2 ) == (0x20|reg) )
						registers[reg] = GetByte ( offset - pos[reg]*2 + 1 );
					if ( GetByte ( offset - pos[reg]*2 ) == (0x48|reg) )
					{
						relative = GetByte ( offset - pos[reg]*2 + 1 );
						registers[reg] = GetWord ( ((offset - pos[reg]*2)&0xFFFFFFFC)+4+4*relative );
					}
					if ( GetByte ( offset - pos[reg]*2 ) == (0xA0|reg) )
					{
						relative = GetByte ( offset - pos[reg]*2 + 1 );
						registers[reg] = ((offset - pos[reg]*2)&0xFFFFFFFC)+4+4*relative;
					}
					pos[reg]++;
				}
//				printf ( "\n I  R%i = %08X  pos = %i", reg, registers[reg], pos[reg] );
			}

			for ( reg = 0; reg < 8; reg++ )
			{
				while ( pos[reg] )
				{
					if ( GetByte ( offset - pos[reg]*2 ) == 0x1C && (GetByte ( offset - pos[reg]*2 + 1 ) & 0x07) == reg )
					{
						relative = (GetByte ( offset - pos[reg]*2 + 1 )>>3) & 0x07;
						if ( pos[reg] < pos[relative] )
							registers[reg] = registers[relative];
					}
					if ( GetByte ( offset - pos[reg]*2 ) == (0x30|reg) )
						registers[reg] += GetByte ( offset - pos[reg]*2 + 1 );
					if ( GetByte ( offset - pos[reg]*2 ) == (0x38|reg) )
						registers[reg] -= GetByte ( offset - pos[reg]*2 + 1 );
					pos[reg]--;
				}
//				printf ( "\n II R%i = %08X  pos = %i", reg, registers[reg], pos[reg] );
			}

			if ( registers[0] )
				printf ( "OSTRICH ( \"%s\", ", GetStr ( registers[0] ));
			else
				printf ( "ASSERT ( unknown, " );

			if ( registers[1] )
				printf ( "0x%02X );", registers[1] );
			else
				printf ( "unknown );" );

			printf ( "\n" );

			offset++;
		}
	}

	printf ( "\n" );
	printf ( "IDA Script output:\n" );
	for ( pos = 0; pos < start_addresses; pos++ )
		printf ( "MakeFunction ( 0x%08X, BADADDR );\n", start_address[pos] );


	return 0;

}



char *
get_assert_strings ( int address, int bytes )
{
	int function = 0x0131C424;
	int pos = 0;
	int scanback = 5;
	int val_r0 = 0;
	int relative = 0;
	int offset = 0;
	int function = SimpleFindPattern (  "\xB5\x70\x1C\x0C\x1C\x11\x1C\x06\x1C\x15\x1C\x20\xF7\x77\xFC\xE3\x1C\x33", 
										"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF8\x00\xF8\x00\xFF\xFF", 18, 0 );

	if ( function == E_FAIL )
	{
		say ( "Error finding function\n" );
		return NULL;
	}
    offset = ARMFindSrcOfDest ( BL, function, address, MEM_AUTO, LOC_FORWARD );

	if ( offset == E_FAIL )
		return NULL;

	if ( offset - address > bytes )
		return NULL;

	pos = 1;
	while ( pos <= scanback )
	{
		if ( GetByte ( offset - pos*2 ) == 0x48 )
		{
			relative = GetByte ( offset - pos*2 + 1 );
			val_r0 = GetWord ( ((offset - pos*2)&0xFFFFFFFC)+4+4*relative );
		}
		if ( GetByte ( offset - pos*2 ) == 0xA0 )
		{
			relative = GetByte ( offset - pos*2 + 1 );
			val_r0 = ((offset - pos*2)&0xFFFFFFFC)+4+4*relative;
		}
		pos++;
	}

	pos = 1;
	while ( pos <= scanback )
	{
		if ( GetByte ( offset - pos*2 ) == 0x30 )
			val_r0 += GetByte ( offset - pos*2 + 1 );
		if ( GetByte ( offset - pos*2 ) == 0x38 )
			val_r0 -= GetByte ( offset - pos*2 + 1 );
		pos++;
	}
	if ( val_r0 )
		return GetStr ( val_r0 );

	return NULL;

}


char *
get_assert_str ( int address )
{
	char *ret = NULL;

	ret = get_assert_strings ( address, 200 );
	if ( !ret )
		return get_assert_strings ( address-200, 200 );

}



int g_scan_iopins_setup ()
{
	int offset = MEM_AUTO;
	int pos = 0;
	int scanback = 5;
	int found_r0 = 0;
	int found_r1 = 0;
	int val_r0 = 0;
	int val_r1 = 0;

	/* find hw_io_setpinstate */
	int function = SimpleFindPattern ( "\xB5\xFE\x1C\x0E\x1C\x05\x29\x3F\x4C\x45\xD3\x05", "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\xFF\x00", 12, 0 );

	if ( function == E_FAIL )
	{
		say ( "Error finding function\n" );
		return 0;
	}

//	printf ( "0x%08X\n", function );

	printf ( "    hw_io_set_pinstate\n" );
	printf ( " --------------------------\n" );
	printf ( "\n" );

	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
		found_r0 = 0;
		found_r1 = 0;
        offset = ARMFindSrcOfDest ( BL, function, offset, MEM_AUTO, LOC_FORWARD );
		if ( offset != E_FAIL )
		{
			printf ( "0x%08X  ", offset );
			pos = 1;
			while ( pos <= scanback )
			{
				if ( !found_r0 && GetByte ( offset - pos*2 ) == 0x20 )
				{
					found_r0 = 1;
					val_r0 = GetByte ( offset - pos*2 + 1 );
				}
				if ( !found_r1 && GetByte ( offset - pos*2 ) == 0x21 )
				{
					found_r1 = 1;
					val_r1 = GetByte ( offset - pos*2 + 1 );
				}
				pos++;
			}
			if ( found_r0 )
				printf ( "%s", GENIO[val_r0] );
			else
				printf ( "                              " );

			if ( found_r1 )
				printf ( "     %s   %s   %s   %s  ", (val_r1&0x20)?"PullUp":"      ", (val_r1&0x4)?"RetOld":"      ",(val_r1&0x2)?"Output":"      ",(val_r1&0x1)?"Input ":"      " );
			else
				printf ( "                         " );

//			printf ( "     assert:  <%s>", get_assert_str ( offset ));
			printf ( "\n" );

			offset++;
		}
	}

	return 0;

}

int g_scan_iopins_state ()
{
	int offset = MEM_AUTO;
	int pos = 0;
	int scanback = 5;
	int found_r0 = 0;
	int found_r1 = 0;
	int val_r0 = 0;
	int val_r1 = 0;

	/* find hw_io_set_pin */
	int function = SimpleFindPattern ( "\xB5\x70\x1C\x0D\x1C\x04\x28\x2F\x4E\x0B\xD3\x05", "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\xFF\x00", 12, 0 );

	if ( function == E_FAIL )
	{
		say ( "Error finding function\n" );
		return 0;
	}

	printf ( "    hw_io_set_pin\n" );
	printf ( " --------------------\n" );
	printf ( "\n" );

	offset = MEM_AUTO;
	while ( offset != E_FAIL )
	{
		found_r0 = 0;
		found_r1 = 0;
        offset = ARMFindSrcOfDest ( BL, function, offset, MEM_AUTO, LOC_FORWARD );
		if ( offset != E_FAIL )
		{
			printf ( "0x%08X: ", offset );
			pos = 1;
			while ( pos <= scanback )
			{
				if ( !found_r0 && GetByte ( offset - pos*2 ) == 0x20 )
				{
					found_r0 = 1;
					val_r0 = GetByte ( offset - pos*2 + 1 );
				}
				if ( !found_r1 && GetByte ( offset - pos*2 ) == 0x21 )
				{
					found_r1 = 1;
					val_r1 = GetByte ( offset - pos*2 + 1 );
				}
				pos++;
			}
			if ( val_r0 > 0x20 )
				printf ( "-- 0x%02X --                    ", val_r0 );
			else
			{
				if ( found_r0 )
					printf ( "%s", GENIO[val_r0] );
				else
					printf ( "                              " );
			}
			if ( found_r1 )
				printf ( "     %s", val_r1?"HIGH":"LOW  " );

//			printf ( "     assert:  <%s>", get_assert_str ( offset ));

			printf ( "\n" );
			offset++;
		}
	}

	return 0;

}
