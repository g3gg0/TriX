

int size = 8 * 1024*1024;
char *filename = "testfile";

int test_v001_read()
{
	int pos = 0;
	int fail = 0;
	t_fileinfo *fi = NULL;


	say ( "\n" );
	say ( " Read test using File-IO\n" );
	say ( "\n" );

	
	say ( " Opening '%s':                         ", filename );
    fi = __file_io_open ( filename, NULL );
    if ( !fi )
    {
		pf();
		say ( " Could not open '%s' for reading\n", filename );
		return E_FAIL;
	}
	if ( !fi->stages || !fi->stages->segments )
    {
		pf();
		say ( " Reading succeeded, but got no stage/segments\n" );
		return E_FAIL;
	}
	if ( fi->stages->length != size || fi->stages->segments->length != size )
    {
		pf();
		say ( " Sizes differ\n" );
		return E_FAIL;
	}
	pd ();
	
	
	say ( " Checking the test data                      " );
	while ( pos < size )
	{
		if ( pos & 1 )
		{
			if ( fi->stages->segments->data[pos] != 0xAA )
				fail++;
		}
		else
		{
			if ( fi->stages->segments->data[pos] != 0x55 )
				fail++;
		}
		pos++;
	}
	if ( fail )
    {
		pf();
		say ( " Got %i different bytes\n", fail );
		return E_FAIL;
	}

	pd ();
	
	

    return E_OK;
}

int test_v001_write()
{
	int pos = 0;
	t_fileinfo *fi = NULL;


	say ( "\n" );
	say ( " Write test using File-IO\n" );
	say ( "\n" );

	say ( " Allocating/Creating FileInfo structure      " );
	fi = __util_smalloc ( sizeof ( t_fileinfo ), "t_fileinfo" );
	fi->filename = filename;
	fi->path = NULL;
	fi->priv = NULL;
	fi->prev = NULL;
	fi->next = NULL;
	fi->stages = __stage_create ();
	if ( !fi->stages )
	{
		pf();
		say ( "could not create stage\n" );
		return E_FAIL;
	}
	fi->stages->segments = __segment_create ();
	if ( !fi->stages->segments )
	{
		pf();
		say ( "could not create segment\n" );
		return E_FAIL;
	}
	
	fi->stages->flags = S_SAVESTAGE;
	fi->stages->length = size;
	fi->stages->segments->length = size;
	fi->stages->segments->data = malloc ( size );
	if ( !fi->stages->segments->data )
	{
		pf();
		say ( "could not create segment data\n" );
		return E_FAIL;
	}
	pd ();


	say ( " Filling in test data                        " );
	while ( pos < size )
	{
		if ( pos & 1 )
			fi->stages->segments->data[pos] = 0xAA;
		else
			fi->stages->segments->data[pos] = 0x55;
		pos++;
	}
	pd ();
	
	
	say ( " Writing '%s':                         ", filename );
	if ( __file_io_write ( filename, fi ) != E_OK )
	{
		pf();
		say ( "could not create write file\n" );
		return E_FAIL;
	}
	pd ();
		

    return E_OK;
}

int test_v001()
{
	say ( "\n\n\n" );
    say ( "------------------------------------------------------\n" );
    say ( "--------------    test script for TriX  --------------\n" );
    say ( "------------------------------------------------------\n" );

	if ( test_v001_write() == E_OK &&
		 test_v001_read() == E_OK )
	{
		say ( "\n\n" );
		say ( "All tests OK\n" );
		return E_OK;
	}

	return E_FAIL;
}

