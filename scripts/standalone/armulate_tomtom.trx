#title "Emulator shell"
#author "g3gg0"
#plugin "trix_armulate"
#plugin "trix_disarm"
#plugin "trix_hwemu"

#include trix
#include stdio
#include trix_armulate
#include trix_disarm
#include trix_hwemu

unsigned int reg_box = E_FAIL;
unsigned int asm_box = E_FAIL;

unsigned int malloc_address = 0;

unsigned int breakpoints[] = { 0x0000C104, 0x0000BE64, 0x0000BA34, 0x0000C0A4, 0x0000BA94, 0x0000BC34, 0xFFFFFFFF, 0 };

t_fileinfo *memory_fi = NULL;
t_segment *current_mem_seg = NULL;

int init_armulate ()
{
	char *val = NULL;
	int value = 0;
	int err = 0;

	UiDlgString ( "Which start address? In hexadecimal form, please.", &val );
	if ( !val )
		return E_FAIL;

	err = 0;
	value = __util_hex_get ( val, &err );
	if ( err )
		return E_FAIL;

	__armulate_setup ( trix_workspace, value );
}

int change_reg ()
{
	char *val = NULL;
	int reg = 0;
	int value = 0;
	int err = 0;

	reg = UiDlgInt ( "Which register to change? (0-15)", 0, 15 );
	if ( reg == E_FAIL )
		return E_FAIL;

	UiDlgString ( "Which value? In hexadecimal form, please.", &val );
	if ( !val )
		return E_FAIL;

	err = 0;
	value = __util_hex_get ( val, &err );
	if ( err )
		return E_FAIL;

	__armulate_set_reg ( reg, value );
}

int change_pc ()
{
	char *val = NULL;
	int value = 0;
	int err = 0;

	UiDlgString ( "Which value? In hexadecimal form, please.", &val );
	if ( !val )
		return E_FAIL;

	err = 0;
	value = __util_hex_get ( val, &err );
	if ( err )
		return E_FAIL;

	__armulate_set_pc ( value );
}

int dump_regs ()
{
	int i = 0;
	unsigned char buffer[64];
	unsigned char msg[1024];

	strcpy ( msg, "" );
	
	for (i=0; i<4; i++ )
	{
		sprintf ( buffer, "R%i:  0x%08X  ", i, __armulate_get_reg ( i ) );
		strcat ( msg, buffer );
	}

	strcat ( msg, "\n" );

	for (i=4; i<8; i++ )
	{
		sprintf ( buffer, "R%i:  0x%08X  ", i, __armulate_get_reg ( i ) );
		strcat ( msg, buffer );
	}

	strcat ( msg, "\n" );

	if ( !__armulate_is_thumb() ) 
	{
		for (i=8; i<10; i++ )
		{
			sprintf ( buffer, "R%i:  0x%08X  ", i, __armulate_get_reg ( i ) );
			strcat ( msg, buffer );
		}
		for (i=10; i<12; i++ )
		{
			sprintf ( buffer, "R%i: 0x%08X  ", i, __armulate_get_reg ( i ) );
			strcat ( msg, buffer );
		}

		strcat ( msg, "\n" );
		sprintf ( buffer, "R%i: 0x%08X  ", 12, __armulate_get_reg ( 12 ) );
		strcat ( msg, buffer );
	}

	sprintf ( buffer, "SP:  0x%08X  ", __armulate_get_reg ( 13 ) );
	strcat ( msg, buffer );
	sprintf ( buffer, "LR:  0x%08X  ", __armulate_get_reg ( 14 ) );
	strcat ( msg, buffer );
	sprintf ( buffer, "PC:  0x%08X  ", __armulate_get_pc () );
	strcat ( msg, buffer );

	strcat ( msg, "\n" );
	sprintf ( buffer, "CPSR 0x%08X  ", __armulate_get_cpsr ( ) );
	strcat ( msg, buffer );

	UiBoxClear ( reg_box );
	UiBoxMsg ( reg_box, msg );
	
	return E_OK;

}


int exec_next ()
{
	char buffer[256];
	int state = 0;

	state = __armulate_exec_next ();

	__disarm_address ( trix_workspace, (char*)buffer, __armulate_get_pc (), __armulate_is_thumb () );
	printf ( buffer );
	if ( state != ARMULATE_EXECUTED )
		printf ( "\t[%s]", __armulate_reason (state)  );
	printf ( "\n" );

}

void own_memset ( unsigned int addr, unsigned int val, unsigned int length )
{
	int pos = 0;

	while ( pos < length )
	{
		SetByte ( addr + pos, val );
		pos++;
	}

}

void own_memcpy ( unsigned int dst, unsigned int src, unsigned int length )
{
	int pos = 0;

	while ( pos < length )
	{
		SetByte ( dst + pos, GetByte ( src + pos ) );
		pos++;
	}
}

void own_memmove ( unsigned int dst, unsigned int src, unsigned int length )
{
	int pos = 0;
	unsigned char *buf = malloc ( length );
	
	MemCpyGet ( buf, src, length );
	MemCpyPut ( dst, buf, length );
	
	free ( buf );
}

unsigned int own_malloc ( unsigned int length )
{
	unsigned int ret = malloc_address;
	
	malloc_address += length;
	
	// align to 0x20-byte boundary
	malloc_address += 0x1F;
	malloc_address &= ~0x1F;
	
	return ret;
}


int exec_until ( unsigned int address )
{
	char buffer[256];
	int state = 0;
	int cont = 1;

	while ( cont )
	{
		state = __armulate_run_until ( address );

		if ( state != ARMULATE_EXECUTED )
		{
			int r0 = __armulate_get_reg ( 0 );
			int r1 = __armulate_get_reg ( 1 );
			int r2 = __armulate_get_reg ( 2 );
			int lr = __armulate_get_reg ( 14 );
			
			switch ( __armulate_get_pc () )
			{
				case 0x0000C104: // memset
//					printf ( "memset ( 0x%08X, 0x%08X, 0x%08X ) from %08X\r\n", r0, r1, r2, lr - 4 );
					own_memset ( r0, r1, r2 );
					__armulate_set_pc ( lr );
//					printf ( " (ok)\r\n" );
					break;
				case 0x0000BE64: // memcpy
//					printf ( "memcpy ( 0x%08X, 0x%08X, 0x%08X ) from %08X\r\n", r0, r1, r2, lr - 4 );
					own_memcpy ( r0, r1, r2 );
					__armulate_set_pc ( lr );
//					printf ( " (ok)\r\n" );
					break;
				case 0x0000BA94: // memmove
//					printf ( "memmove ( 0x%08X, 0x%08X, 0x%08X ) from %08X\r\n", r0, r1, r2, lr - 4 );
					own_memmove ( r0, r1, r2 );
					__armulate_set_pc ( lr );
//					printf ( " (ok)\r\n" );
					break;
				case 0x0000BC34: // strlen
//					printf ( "strlen ( 0x%08X ) from %08X\r\n", r0, lr - 4 );
					r0 = GetStrLen ( r0 );
					__armulate_set_reg ( 0, r0 );
					__armulate_set_pc ( lr );
//					printf ( " (ok)\r\n" );
					break;
				case 0x0000BA34: // malloc
//					printf ( "malloc ( 0x%08X ) from %08X\r\n", r0, lr - 4 );
					r0 = own_malloc ( r0 );
					__armulate_set_reg ( 0, r0 );
					__armulate_set_pc ( lr );
//					printf ( " (ok)\r\n" );
					break;
				case 0x0000C0A4: // free
//					printf ( "free from %08X\r\n", lr - 4 );
					__armulate_set_pc ( lr );
//					printf ( " (ok)\r\n" );
					break;
				default:
					cont = 0;
					/*
					__disarm_address ( trix_workspace, (char*)buffer, __armulate_get_pc (), __armulate_is_thumb () );
					printf ( buffer );
					printf ( "\t[%s]", __armulate_reason (state)  );		
					printf ( "\n" );
					*/
			}
		}
	}
}


int exec_until_dlg ()
{
	char *val = NULL;
	int value = 0;
	int err = 0;

	UiDlgString ( "Until which address? In hexadecimal form, please.", &val );
	if ( !val )
		return E_FAIL;

	err = 0;
	value = __util_hex_get ( val, &err );
	if ( err )
		return E_FAIL;
		
	exec_until ( value );
}

int exec_step ()
{
	char buffer[256];
	int state = 0;

	state = __armulate_exec_step ();


	__disarm_address ( trix_workspace, (char*)buffer, __armulate_get_pc (), __armulate_is_thumb () );
	printf ( buffer );
	if ( state != ARMULATE_EXECUTED )
		printf ( "\t[%s]", __armulate_reason (state)  );
	printf ( "\n" );

}

int print_opcode ()
{
	char buffer[256];

	__disarm_address ( trix_workspace, (char*)buffer, __armulate_get_pc (), __armulate_is_thumb () );

	printf ( buffer );
	printf ( "\n" );
}

int print_opcodes ()
{
	char buffer[128];
	char msg[2048];
	int opcode_size = 4;
	int pos = 0;
	int lines_before = 4;
	int lines_after = 4;

	if ( __armulate_is_thumb() )
		opcode_size = 2;

	strcpy ( msg, "" );

	for ( pos = 0; pos < lines_after+lines_before+1; pos++ )
	{
		__disarm_address ( trix_workspace, (char*)buffer, __armulate_get_pc () + (pos-lines_before)*opcode_size, __armulate_is_thumb () );
		if ( pos == lines_before )
			strcat ( msg, "-> " );
		else
			strcat ( msg, "   " );
		strcat ( msg, buffer );
		strcat ( msg, "\n" );
	}
	UiBoxClear ( asm_box );
	UiBoxMsg ( asm_box, msg );
}

int
add_memory_segment ( unsigned int address, unsigned int length, unsigned int clear )
{
	unsigned int pos = 0;
	unsigned char *name = malloc ( 32 );
	
	sprintf ( name, "0x%08X", address );
	current_mem_seg->next = __segment_create ();
	current_mem_seg = current_mem_seg->next;
	
	current_mem_seg->name = name;
	current_mem_seg->start = address;
	current_mem_seg->end = address + length;
	current_mem_seg->length = length;
	current_mem_seg->data = malloc ( length );

	if ( clear == 1 )
	{
		while ( pos < length )
			current_mem_seg->data[pos++] = 0x00;
	}
	if ( clear == 2 )
	{
		while ( pos < length )
			current_mem_seg->data[pos++] = 0xFF;
	}
	
	
	WorkspaceUpdateMemmap ( trix_workspace );
	__hwemu_register ( trix_workspace, address );
}

void
init_memory_segments ()
{
	t_fileinfo *ptr = trix_workspace->fileinfo;
	
	memory_fi = __file_io_create_empty ();
	
	while ( ptr->next )
		ptr = ptr->next;
		
	ptr->next = memory_fi;
	current_mem_seg = memory_fi->stages->segments;
	
}

int add_segment ()
{
	char buffer[256];
	int state = 0;
	char *val = NULL;
	int base = 0;
	int length = 0;
	int err = 0;

	UiDlgString ( "Base address? In hexadecimal form, please.", &val );
	if ( !val )
	{	
		printf ( "Invalid address\n" );
		return E_FAIL;
	}

	err = 0;
	base = __util_hex_get ( val, &err );
	if ( err )
	{	
		printf ( "Invalid address\n" );
		return E_FAIL;
	}

	UiDlgString ( "Length? In hexadecimal form, please.", &val );
	if ( !val )
	{	
		printf ( "Invalid address\n" );
		return E_FAIL;
	}

	err = 0;
	length = __util_hex_get ( val, &err );
	if ( err )
	{	
		printf ( "Invalid address\n" );
		return E_FAIL;
	}
}

int rebase_segment ( unsigned int base )
{
	trix_workspace->fileinfo->stages->segments->start = base;
	trix_workspace->fileinfo->stages->segments->end = base + trix_workspace->fileinfo->stages->segments->length;

	WorkspaceUpdateMemmap ( trix_workspace );
	printf ( "Rebased to 0x%08X\n", base );
}



int change_endianess ()
{
	if ( trix_workspace->flags == FLAGS_ENDIANESS_LE )
	{
		trix_workspace->flags = FLAGS_ENDIANESS_BE;
	}
	else
	{
		trix_workspace->flags = FLAGS_ENDIANESS_LE;
	}
	
	WorkspaceUpdateMemmap ( trix_workspace );
}



int main ( )
{
	int repaint = 1;
	int done = 0;
	int command = 0;
	unsigned char *serial = NULL;
	
	char *menu[] = { "Initialize/Reset Emu", "Change Registers", "Change PC", "Rebase Code", "Toggle Endianess", "Execute Next instruction", "Step into instruction", "Execute until", "Dump Memory Map", "Dump Memory" };

	if ( !trix_workspace || !trix_workspace->fileinfo || !trix_workspace->fileinfo->stages || !trix_workspace->fileinfo->stages->segments )
	{
		UiDlgMsg ( "Sorry, no file loaded", 0 );
		return E_FAIL;
	}

	init_memory_segments ();
	change_endianess ();
	
	add_memory_segment ( 0x10000000, 0x2000, 1 );  // Stack and data
	add_memory_segment ( 0x10002000, 0x2000, 1 );  // buffer for malloc
	
	
	while ( true )
	{
		UiDlgString ( "Device Serial", &serial );
		if ( !serial )
			return E_FAIL;

		// clear old key
		own_memset ( 0x10000100, 0x00, 0x100 );
		MemCpyPut ( 0x10000100, serial, strlen ( serial ) );
		
		malloc_address = 0x10002000;
		
		__armulate_setup ( trix_workspace, 0x00221168 );
		__armulate_set_bps ( breakpoints );
		__armulate_set_reg ( 13, 0x10001F00 ); // stack
		
		__armulate_set_reg ( 0, 0x10000100 ); // buffer
		__armulate_set_reg ( 1, strlen ( serial ) ); // size_in
		__armulate_set_reg ( 2, 0x10000200 ); // dest_buffer
		__armulate_set_reg ( 3, 1 ); // some_flag
		
		exec_until ( 0x00221210 );
		
		printf ( "DeviceSerialNumber = %s\r\n", GetStr ( 0x10000100 ) );
		printf ( "DeviceUniqueID = %s\r\n", GetStr ( 0x10000200 ) );
	}


}

