#title "ARMulate advanced shell"
#author "g3gg0"

#include trix
#include stdio


#plugin "trix_armulate"
#include trix_armulate

#plugin "trix_disarm"
#include trix_disarm

#plugin trix_prodigize
#include trix_prodigize

#plugin trix_armada
#include trix_armada


//
// fit to your paths
/////////////////////////////////////////////////////////
unsigned int little_endian = 1;
char *u_2nd = "support\\te_2nd.fia";
char *u_3rd = "support\\te_shell_v2.fia";
char *dumpfile = "support\\flashdump.bin";
char *armadafile = "support\\dynamic_code.asm";
char *cfile = "support\\dynamic_code.c";
char *binfile = "support\\dynamic_code.bin";
/////////////////////////////////////////////////////////


unsigned int read_address = 0x00000000;
unsigned int read_bytes = 0x100;

int quiet = 0;


int set_memory ( int address, int value, int width );
int get_memory ( int address, int width );

int init_armulate ()
{
	char *val = NULL;
	int value = 0;
	int err = 0;

	UiDlgString ( "Which start address? In hexadecimal form, please.", &val );
	if ( !val )
		return E_FAIL;

	err = 0;
	value = __util_hex_get ( val, &err );
	if ( err )
		return E_FAIL;

	__armulate_setup ( trix_workspace, value );
}

int change_reg ()
{
	char *val = NULL;
	int reg = 0;
	int value = 0;
	int err = 0;

	reg = UiDlgInt ( "Which register to change? (0-15)", 0, 15 );
	if ( reg == E_FAIL )
		return E_FAIL;

	UiDlgString ( "Which value? In hexadecimal form, please.", &val );
	if ( !val )
		return E_FAIL;

	err = 0;
	value = __util_hex_get ( val, &err );
	if ( err )
		return E_FAIL;

	__armulate_set_reg ( reg, value );
}

int change_pc ()
{
	char *val = NULL;
	int value = 0;
	int err = 0;

	UiDlgString ( "Which value? In hexadecimal form, please.", &val );
	if ( !val )
		return E_FAIL;

	err = 0;
	value = __util_hex_get ( val, &err );
	if ( err )
		return E_FAIL;

	__armulate_set_pc ( value );
}

int dump_regs ()
{
	int i = 0;
	
	for (i=0; i<4; i++ )
		printf ( "R%i:  0x%08X  ", i, __armulate_get_reg ( i ) );

	printf ( "\n" );

	for (i=4; i<8; i++ )
		printf ( "R%i:  0x%08X  ", i, __armulate_get_reg ( i ) );

	printf ( "\n" );

	printf ( "SP:  0x%08X  ", __armulate_get_reg ( 13 ) );
	printf ( "LR:  0x%08X  ", __armulate_get_reg ( 14 ) );
	printf ( "PC:  0x%08X  ", __armulate_get_pc () );
	printf ( "\n" );
	
	return E_OK;

}


int exec_next ()
{
	char buffer[256];
	int state = 0;

	state = __armulate_exec_next ();

	__disarm_address ( trix_workspace, (char*)buffer, __armulate_get_pc (), __armulate_is_thumb () );
	printf ( buffer );
	if ( state != ARMULATE_EXECUTED )
	{
		printf ( "\t[%s]", __armulate_reason (state)  );
		if ( state == (ARMULATE_EXCEPTION | ARMULATE_ABORT_MEMORY_WR) )
		{
			printf ( " [OW]\n" );
			set_memory ( __armulate_get_abort_memory (), __armulate_get_abort_value () , __armulate_get_abort_width () );
			__armulate_set_abort_override ( 1 );
		}
		else if ( state == (ARMULATE_EXCEPTION | ARMULATE_ABORT_MEMORY_RD) )
		{
			printf ( " [OR]\n" );
			__armulate_set_abort_value ( get_memory ( __armulate_get_abort_memory () , __armulate_get_abort_width () ));
			__armulate_set_abort_override ( 1 );
		}
		else if ( state == (ARMULATE_EXCEPTION | ARMULATE_ABORT_MEMORY_EX) )
		{
			printf ( " [OX]\n" );
			__armulate_set_abort_value ( 0x4770 );
			__armulate_set_abort_override ( 1 );
		}
		else
		{
			return E_FAIL;
		}

	}
	printf ( "\n" );

}


int exec_until ()
{
	char buffer[256];
	int state = 0;
	char *val = NULL;
	int value = 0;
	int err = 0;

	UiDlgString ( "Until which address? In hexadecimal form, please.", &val );
	if ( !val )
		return E_FAIL;

	err = 0;
	value = __util_hex_get ( val, &err );
	if ( err )
		return E_FAIL;


	state = __armulate_run_until ( value );


	__disarm_address ( trix_workspace, (char*)buffer, __armulate_get_pc (), __armulate_is_thumb () );
	printf ( buffer );
	if ( state != ARMULATE_EXECUTED )
		printf ( "\t[%s]", __armulate_reason (state)  );
	printf ( "\n" );

}
int exec_step ()
{
	char buffer[256];
	int state = 0;

	state = __armulate_exec_step ();


	__disarm_address ( trix_workspace, (char*)buffer, __armulate_get_pc (), __armulate_is_thumb () );
	printf ( buffer );
	if ( state != ARMULATE_EXECUTED )
	{
		printf ( "\t[%s]", __armulate_reason (state)  );
		if ( state == (ARMULATE_EXCEPTION | ARMULATE_ABORT_MEMORY_WR) )
		{
			printf ( " [OW]\n" );
			set_memory ( __armulate_get_abort_memory (), __armulate_get_abort_value () , __armulate_get_abort_width () );
			__armulate_set_abort_override ( 1 );
		}
		else if ( state == (ARMULATE_EXCEPTION | ARMULATE_ABORT_MEMORY_RD) )
		{
			printf ( " [OR]\n" );
			__armulate_set_abort_value ( get_memory ( __armulate_get_abort_memory () , __armulate_get_abort_width () ));
			__armulate_set_abort_override ( 1 );
		}
		else if ( state == (ARMULATE_EXCEPTION | ARMULATE_ABORT_MEMORY_EX) )
		{
			printf ( " [OX]\n" );
			__armulate_set_abort_value ( 0x4770 );
			__armulate_set_abort_override ( 1 );
		}
		else
		{
			return E_FAIL;
		}
	}
	printf ( "\n" );

}

int print_opcode ()
{
	char buffer[256];

	__disarm_address ( trix_workspace, (char*)buffer, __armulate_get_pc (), __armulate_is_thumb () );

	printf ( buffer );
	printf ( "\n" );
}

int dump_memmap ( )
{
	t_memmap *m = trix_workspace->memmap;

	while ( m )
	{
		printf ( "----------------------\n" );
		printf ( "Start : 0x%08X\n", m->start );
		printf ( "End   : 0x%08X\n", m->end );
		printf ( "Length: 0x%08X\n", m->length );
		m = (t_memmap*)m->next;
	}

}

int dump_memory ()
{
	char *addr = NULL;
	int address = 0;
	int length = 0;
	int err = 0;

	UiDlgString ( "Which address? In hexadecimal form, please.", &addr );
	if ( !addr )
		return E_FAIL;

	err = 0;
	address = __util_hex_get ( addr, &err );
	if ( err )
		return E_FAIL;

	length = UiDlgInt ( "How many bytes? (0-0xFFFFFF)", 0, 0xFFFFFF );
	if ( length == E_FAIL )
		return E_FAIL;

	DrawBytes ( address, 16, length );
}


int show_flash_info ( unsigned char *data )
{
	int pos = 0;
	int done = 0;
	int fl_num = 0;
	int fl_id = 0;
	int fl_start = 0;

	while ( !done )
	{
		fl_start = (data[pos+2]) & 0xFF;
		if ( little_endian )
			fl_id = (data[pos+4] << 24) | (data[pos+3] << 16) | (data[pos+6] << 8) | data[pos+5];
		else
			fl_id = (data[pos+3] << 24) | (data[pos+4] << 16) | (data[pos+5] << 8) | data[pos+6];
		fl_num++;
		pos += 11;

		if ( fl_id != 0x00000001 )
			printf ( "  [i] Flash %i: %08X at 0x%02X000000\n", fl_num, fl_id, fl_start );
		else
			done = 1;
			
//		if ( fl_num == 2 )
//			done = 1;
	}
	return E_OK;
}

unsigned char neg_checksum ( unsigned char *buffer, unsigned int bytes )
{
   unsigned int i = 0;
	unsigned char k = 0xFF;

   for(i=0; i<bytes; i++)
      k = k - buffer[i];

   return k;
}



unsigned short pos_checksum ( unsigned char *buffer, unsigned int bytes )
{
   unsigned int i = 0;
	unsigned short k = 0;

   for ( i=0; i < bytes; i++)
		k = k + buffer[i];

   return k;
}


int read_mem ( unsigned char *buffer, unsigned int address, unsigned int bytes )
{
   unsigned char cmd[8];
	unsigned char i = 0;
   unsigned short res = 0;
   unsigned int chk = 0;
	unsigned int orchk = 0;


   if ( bytes > 0xFFFD )
     return false;

   cmd[0] = 0x30;
   cmd[1] = (unsigned char)(address >> 24 );
   cmd[2] = (unsigned char)(address >> 16 );
   cmd[3] = (unsigned char)(address >>  8 );
   cmd[4] = (unsigned char)(address & 0xFF);
   cmd[5] = (unsigned char)(bytes >> 8 );
   cmd[6] = (unsigned char)(bytes & 0xFF);
   cmd[7] = neg_checksum ( cmd + 1, 6 );


   // send command
   res = __prodigize_send_data ( cmd, 8 );
   if ( res != E_OK )
   {
		printf ( "ERROR %i while __prodigize_send_data()\n", res );
		return E_FAIL;
   }

   // add 16 bit chksum
   bytes = bytes + 2;



   res = __prodigize_read_data ( buffer, bytes );
   if ( res != E_OK )
   {
		printf ( "ERROR %i while __prodigize_read_data()\n", res );
		return E_FAIL;
   }


	chk = pos_checksum ( buffer, bytes-2 );
   orchk = (buffer[bytes-2] << 8) | buffer[bytes-1];

   // test chksum
   if ( chk != orchk )
		printf ( "checksum failed! 0x%02X bytes read from %08X\n calced: %04X\n said  : %04X\n", bytes, address, chk, orchk );

   return E_OK;
}


unsigned char *load_loader ( unsigned char *name, int *length )
{
	t_workspace *ws = NULL;
	int start = 0;

	if ( !name )
		return NULL;
	ws = WorkspaceStartup  ( name );
	if ( !ws )
	{
		printf ( "  [F] unable to open '%s'\n", name );
		return NULL;
	}

	if ( __v_get_b(ws, 0) != 0xA0 && __v_get_b(ws, 0) != 0xA1 )
 	{
		printf ( "  [F] invalid loader '%s'\n", name );
		return NULL;
	}

	start = __v_get_w ( ws, 1 );
	*length = __v_get_size ( ws ) - (start+5);

	if ( !quiet )
		printf ( "  [i] loader type %02X, %i bytes\n", __v_get_b(ws, 0), *length );


	return __v_get_ptr ( ws, start+5 );

}


int do_get_uppid ( )
{
	char buffer[1024];

	int length = 0;
	unsigned char *loader = NULL;


	//
	// initialize phone and get UPP ID
	//
	if ( !quiet )
		printf ( "[x] Init Phone and check UPP ID...\n" );
	if ( __prodigize_check_bootrom ( buffer ) != E_OK )
		return E_FAIL;

	if ( !quiet )
		printf ( "  [i] UPP ID: %02X %02X\n", buffer[1], buffer[2] );

	return E_OK;
}

int do_load_2nd ( )
{
	char buffer[1024];

	int length = 0;
	unsigned char *loader = NULL;

	//
	// open second loader and upload
	//
	if ( !quiet )
	{
		printf ( "\n" );
		printf ( "[x] Load 2nd loader...\n" );
	}

	loader = load_loader ( u_2nd, &length );
	if ( !loader )
		return E_FAIL;

	if ( __prodigize_boot_2nd ( buffer, loader, length ) != E_OK )
		return E_FAIL;

	if ( !quiet )
		show_flash_info ( buffer );

	return E_OK;
}

int do_load_3rd ( )
{
	char buffer[1024];

	int length = 0;
	unsigned char *loader = NULL;


	//
	// open third loader and upload
	//
	if ( !quiet )
	{
		printf ( "\n" );
		printf ( "[x] Load 3rd loader...\n" );
	}

	loader = load_loader ( u_3rd, &length );
	if ( !loader )
		return E_FAIL;

	if ( __prodigize_boot_3rd ( loader, length ) != E_OK )
		return E_FAIL;

	return E_OK;
}

int do_read_mem ( )
{
	char *buffer;

	int length = 0;
	unsigned char *loader = NULL;

	buffer = malloc ( read_bytes + 2 );

	//
	// read memory area
	//
	printf ( "\n" );
	printf ( "[x] Read Memory...\n" );
	if ( read_mem ( buffer, read_address, read_bytes ) != E_OK )
	{
		free ( buffer );
		return E_FAIL;
	}


	printf ( "\n" );
	printf ( "[x] Dumping 0x%02X bytes from 0x%08X:\n", read_bytes, read_address );
	printf ( "---------------------------------------------------------------\n" );
	__util_dump_bytes ( buffer, 0x10, read_bytes );
	printf ( "---------------------------------------------------------------\n" );

	free ( buffer );
}

int do_dump_mem ( )
{
	char *filebuffer = NULL;
	char *buffer = NULL;

	int aborted = 0;
	int length = 0;
	unsigned int pos = 0;
	unsigned int bytes = 0;
	unsigned int bytes_left = 0;
	unsigned int bytes_count = 0x2000;
	t_workspace *ws = NULL;


	buffer = malloc ( read_bytes + 2 );

	printf ( "\n" );
	printf ( "[x] Dump Memory...\n" );

	bytes_left = read_bytes;

	while ( bytes_left > 0 || aborted )
	{	
		if ( bytes_left > bytes_count )
			bytes = bytes_count;
		else
			bytes = bytes_left;

		printf ( "  - 0x%08X-0x%08X (0x%04X left)\n", pos, pos+bytes, bytes_left );
		if ( read_mem ( &buffer[pos], read_address+pos, bytes ) != E_OK )
		{
			printf ( "[F] FAILED... (still saving)\n" );
			aborted = 1;
		}
		else
		{
			bytes_left = bytes_left - bytes;
			pos += bytes;
		}

		filebuffer = malloc ( read_bytes );
		memcpy ( filebuffer, buffer, read_bytes );
		ws = WorkspaceCreateFileFromBuffer ( filebuffer, read_bytes );
		__file_write ( dumpfile , ws->fileinfo );
		__workspace_release ( ws );
		
	}


}

int do_change_bytes ()
{
	int length = 0;

	length = UiDlgInt ( "How many bytes? (0-0xFD for read_mem, 0-0x0FFFFFFF for dump_mem)", 0, 0x0FFFFFFF );
	if ( length == E_FAIL )
	{
		printf ( "[!] Invalid value\n" );
		return E_FAIL;
	}

	read_bytes = length;
	return E_OK;
}

int do_change_address ()
{
	char *addr = NULL;
	int address = 0;
	int length = 0;
	int err = 0;

	addr = malloc ( 16 );
	sprintf ( addr, "0x%08X", read_address );

	UiDlgString ( "Which address? In hexadecimal form, please.", &addr );
	if ( !addr )
	{
		printf ( "[!] Invalid value\n" );
		return E_FAIL;
	}

	err = 0;
	address = __util_hex_get ( addr, &err );
	if ( err )
		return E_FAIL;

	read_address = address;

	return E_OK;
}


int execute_code ( unsigned int address )
{
   unsigned char cmd[6];
   unsigned short res = 0;

   cmd[0] = 0x31;
   cmd[1] = (unsigned char)(address >> 24 );
   cmd[2] = (unsigned char)(address >> 16 );
   cmd[3] = (unsigned char)(address >>  8 );
   cmd[4] = (unsigned char)(address & 0xFF);
   cmd[5] = neg_checksum ( cmd + 1, 4 );



   // send command
	printf ( "[x] Executing 0x%08X\n", address );
   res = __prodigize_send_data ( cmd, 6 );
   if(res)
   {
		printf ( "  [F] execute failed! phone has locked up\n" );
		return E_FAIL;
   }


   // read ok signal
   res = __prodigize_read_data ( cmd, 1 );

   if ( cmd[0] != 0x55 )
		printf ( "  [F] execute failed? 0x%02X (this case must not happen!)\n", cmd[0] );
	else
		printf ( "  [i] successfully executed!\n" );
	


	return E_OK;
}

int do_run_func ()
{
	char *addr = NULL;
	int address = 0;
	int length = 0;
	int err = 0;
	int loop_count = 1;

	addr = malloc ( 16 );
	sprintf ( addr, "0x%08X", read_address );

	UiDlgString ( "Which address to execute? In hexadecimal form, please.", &addr );
	if ( !addr )
		return E_FAIL;

	err = 0;
	address = __util_hex_get ( addr, &err );
	if ( err )
		return E_FAIL;

	execute_code ( address );
}

int set_memory ( int address, int value, int width )
{
	unsigned char cmd[10];
	unsigned short res = 0;
	int pos = 0;
	static int address = 0;

	if ( width == 4 )
		cmd[pos++] = 0x35;	
	else if ( width == 2 )
		cmd[pos++] = 0x34;
	else
		cmd[pos++] = 0x33;
		
	cmd[pos++] = (unsigned char)(address >> 24 );
	cmd[pos++] = (unsigned char)(address >> 16 );
	cmd[pos++] = (unsigned char)(address >>  8 );
	cmd[pos++] = (unsigned char)(address & 0xFF);
	
	if ( width == 4 )
	{
		cmd[pos++] = (unsigned char)(value >> 24 ) & 0xFF;
		cmd[pos++] = (unsigned char)(value >> 16 ) & 0xFF;
	}
	if ( width >= 2 )
		cmd[pos++] = (unsigned char)(value >>  8 ) & 0xFF;
		
	cmd[pos++] = (unsigned char)(value & 0xFF);
	cmd[pos] = neg_checksum ( cmd + 1, pos-1 );


	// send command
	printf ( "[x] Setting 0x%08X to 0x%08X (width %i)\n", address, value, width );
	res = __prodigize_send_data ( cmd, pos + 1 );
	if(res)
	{
		printf ( "  [F] Write failed! phone has locked up\n" );
		return E_FAIL;
	}


	// read ok signal
	res = __prodigize_read_data ( cmd, 1 );

	if ( cmd[0] != 0x55 )
		printf ( "  [F] Write failed? 0x%02X (this case must not happen!)\n", cmd[0] );
	else
		printf ( "  [i] successfully Written!\n" );

	return E_OK;
}

int get_memory ( int address, int width )
{
	unsigned char cmd[10];
	unsigned short chk = 0;
	unsigned short orchk = 0;
	unsigned short res = 0;
	int pos = 0;
	static int address = 0;

	if ( width == 4 )
		cmd[pos++] = 0x38;	
	else if ( width == 2 )
		cmd[pos++] = 0x37;
	else
		cmd[pos++] = 0x36;
		
	cmd[pos++] = (unsigned char)(address >> 24 );
	cmd[pos++] = (unsigned char)(address >> 16 );
	cmd[pos++] = (unsigned char)(address >>  8 );
	cmd[pos++] = (unsigned char)(address & 0xFF);
	
	cmd[pos] = neg_checksum ( cmd + 1, pos-1 );


	
	// send command
	printf ( "[x] Reading 0x%08X (width %i)\n", address, width );
	res = __prodigize_send_data ( cmd, pos + 1 );
	if(res)
	{
		printf ( "  [F] Read failed! phone has locked up\n" );
		return E_FAIL;
	}


	res = __prodigize_read_data ( cmd, width + 2 );
	if ( res != E_OK )
	{
		printf ( "ERROR %i while __prodigize_read_data()\n", res );
		return E_FAIL;
	}


	chk = pos_checksum ( cmd, width );
	orchk = (cmd[width] << 8) | cmd[width+1];

	// test chksum
	if ( chk != orchk )
//		printf ( "  [F] checksum failed! 0x%02X bytes read from %08X\n calced: %04X\n said  : %04X\n", width + 2, address, chk, orchk );
		printf ( "  [F] read failed!\n" );
	else
		printf ( "  [i] successfully read!\n" );


	if ( width == 4 )
		return (cmd[0]<<24) | (cmd[1]<<16) | (cmd[2]<<8) | cmd[3];
	else if ( width == 2 )
		return (cmd[0]<<8) | cmd[1];
	else 
		return cmd[0];
}

int do_set_byte ()
{
	int value = 0;
	int err = 0;
	char *addr = NULL;
	static int address = 0;

	addr = malloc ( 16 );
	sprintf ( addr, "0x%08X", address );

	UiDlgString ( "Which address to write to? In hexadecimal form, please.", &addr );
	if ( !addr )
		return E_FAIL;

	err = 0;
	address = __util_hex_get ( addr, &err );
	if ( err )
		return E_FAIL;

	value = UiDlgInt ( "What value? (0-0xFF)", 0, 0x0FF );
	if ( value == E_FAIL )
	{
		printf ( "[!] Invalid value\n" );
		return E_FAIL;
	}
	
	set_memory ( address, value, 1 );

	return E_OK;
}

int do_set_half ()
{
	int value = 0;
	int err = 0;
	char *addr = NULL;
	static int address = 0;

	addr = malloc ( 16 );
	sprintf ( addr, "0x%08X", address );

	UiDlgString ( "Which address to write to? In hexadecimal form, please.", &addr );
	if ( !addr )
		return E_FAIL;

	err = 0;
	address = __util_hex_get ( addr, &err );
	if ( err )
		return E_FAIL;

	value = UiDlgInt ( "What value? (0-0xFFFF)", 0, 0x0FFFF );
	if ( value == E_FAIL )
	{
		printf ( "[!] Invalid value\n" );
		return E_FAIL;
	}


	set_memory ( address, value, 2 );


	return E_OK;
}


int do_set_word ()
{
	int value = 0;
	int err = 0;
	char *addr = NULL;
	static int address = 0;

	addr = malloc ( 16 );
	sprintf ( addr, "0x%08X", address );

	UiDlgString ( "Which address to write to? In hexadecimal form, please.", &addr );
	if ( !addr )
		return E_FAIL;

	err = 0;
	address = __util_hex_get ( addr, &err );
	if ( err )
		return E_FAIL;

	UiDlgString ( "What value? (0-0xFFFFFFFF) In hexadecimal form, please.", &addr );
	if ( !addr )
		return E_FAIL;

	err = 0;
	value = __util_hex_get ( addr, &err );
	if ( err )
		return E_FAIL;


	set_memory ( address, value, 4 );


	return E_OK;
}

int is_empty ( unsigned char *buffer, unsigned int bytes )
{
	int empty = 0;
	unsigned int pos = 0;

	for ( pos = 0; pos < bytes; pos++ )
	{
		if ( buffer[pos] == 0xFF )
			empty++;
	}

	if ( empty == bytes )
		return 1;

	return 0;
}


#define FREE 0
#define USED 1

int do_scan_mem ( )
{
	int laststate = FREE;
	unsigned int bytes = 30;

	unsigned int start = 0;
	unsigned int end = 0xFFFF0000;
	unsigned int step = 0x00010000;
	unsigned int pos = 0x00000000;
	unsigned char buffer[50];

	printf ( "\n" );
	printf ( "[x] Scanning memory for used regions\n" );
	printf ( "    check 0x%08X - 0x%08X\n", start, end );
	printf ( "\n" );

	pos = start;
	while ( pos <= end )
	{
		if ( (pos&0xFFF00000) != 0x0C300000 )
		{
		if ( read_mem ( buffer, pos, bytes ) != E_OK )
		{
			printf ( "  [F] failed reading %i bytes at 0x%08X\n", bytes, pos );
			return E_FAIL;
		}
		if ( is_empty ( buffer, bytes ) )
		{
			if ( laststate != FREE )
				printf ( "      0x%08X end\n", pos );
			laststate = FREE;
		}
		else
		{
			if ( laststate == FREE )
				printf ( "  [i] 0x%08X start\n", pos );
			laststate = USED;
		}
		}
		pos += step;
	}
	return E_OK;
}

int prepare_phone ( )
{
	if ( do_get_uppid () != E_OK )
		return E_FAIL;
	if ( do_load_2nd () != E_OK )
		return E_FAIL;
	if ( do_load_3rd () != E_OK )		
		return E_FAIL;

	return E_OK;
}


int do_scan_crypt ( )
{
	unsigned int bytes = 8;

	int res = 0;
	int area = 0;
	unsigned int start = 0xC000801;
	unsigned int end = 0xC000DFF;
	unsigned int step = 0x00000002;
	unsigned int pos = 0x00000000;
	unsigned int areas[20] = { 
		0x00000200, 0x005A7600,
//		0x00000000, 0x00800000, 0x01000000, 0x01800000, 0x02000000, 0x02800000, 
//		0x04000000, 0x04800000, 0x08000000, 0x08800000, 0x0A000000, 0x0A800000, 
		0xFFFFFFFF };
	unsigned char area_buffer[20][50];
	unsigned char buffer[50];
	unsigned char cmd[20];

	printf ( "\n" );
	printf ( "[x] Scanning ROM for flashcrypt routine\n" );
	printf ( "    check 0x%08X - 0x%08X\n", start, end );
	printf ( "\n" );

	//
	// prepare phone
	//

	quiet = 1;

	printf ( "  [i] reading memory areas\n" );
	if ( prepare_phone () != E_OK )		
	{
		quiet = 0;
		printf ( "  [F] failed prepare for initial read\n" );
		return E_FAIL;
	}

	// get memory
	area = 0;
	while ( areas[area] != 0xFFFFFFFF )
	{
		printf ( "      reading 0x%08X\n", areas[area] );
		if ( read_mem ( area_buffer[area], areas[area], bytes ) != E_OK )
		{
			printf ( "  [F] failed reading %i bytes at 0x%08X when preparing\n", bytes, pos );
			return E_FAIL;
		}
		area++;
	}

	printf ( "\n" );
	printf ( "  [i] starting procedure\n" );
	pos = start;
	while ( pos <= end )
	{
		//
		// prepare phone
		//

		if ( prepare_phone () != E_OK )		
		{
			quiet = 0;
			printf ( "  [F] failed to prepare for 0x%08X\n", pos );
			return E_FAIL;
		}

	   cmd[0] = 0x16;
	   cmd[1] = (unsigned char)(pos >> 24 );
	   cmd[2] = (unsigned char)(pos >> 16 );
	   cmd[3] = (unsigned char)(pos >>  8 );
	   cmd[4] = (unsigned char)(pos & 0xFF);


	   // send command
		printf ( "  [i] Executing 0x%08X\n", pos );
	   res = __prodigize_send_data ( cmd, 5 );

		if ( !res )
		{
		   // read ok signal
		   res = __prodigize_read_data ( buffer, 1 );
	
		   if ( buffer[0] != 0x55 )
				res = 1;
		}
	
	   if ( !res )
		{

			// check memory
	
			printf ( "        reading areas\n", areas[area] );
			area = 0;
			while ( area >= 0 && areas[area] != 0xFFFFFFFF  )
			{

			//	printf ( "         - 0x%08X\n", areas[area] );
				if ( read_mem ( buffer, areas[area], bytes ) != E_OK )
				{
					printf ( "        [F] failed reading %i bytes at 0x%08X\n", bytes, pos );
					area = -1;
				}
				else
				{
					if ( memcmp ( buffer, area_buffer[area], bytes ) )
						printf ( "        [i] 0x%08X changed after calling 0x%08X\n", areas[area], pos );
					area++;
				}
			}
		}
		pos += step;
	}
	return E_OK;
}

#define BLOCKSIZE 0x80
int do_upload_code ( unsigned int address, unsigned char *data, int bytes )
{
	int bytes_sent = 0;
	int bytes_count = 0;
	int res = 0;
	unsigned char *buffer = NULL;

	buffer = malloc ( BLOCKSIZE + 8 );
	while ( bytes_sent < bytes )
	{
		bytes_count = bytes - bytes_sent;
		if ( bytes_count > BLOCKSIZE )
			bytes_count = BLOCKSIZE;
			
	
		buffer[0] = 0x32;
	  	buffer[1] = (unsigned char)((address+bytes_sent) >> 24 );
  		buffer[2] = (unsigned char)((address+bytes_sent) >> 16 );
	  	buffer[3] = (unsigned char)((address+bytes_sent) >>  8 );
	  	buffer[4] = (unsigned char)((address+bytes_sent) & 0xFF);
	  	buffer[5] = (unsigned char)(bytes_count >> 8 );
	  	buffer[6] = (unsigned char)(bytes_count & 0xFF);
		memcpy ( &buffer[7], &data[bytes_sent], bytes_count );
		buffer[bytes_count+7] = neg_checksum ( buffer + 1, bytes_count+6 );

   		// send command
//   		printf ( "Send block, %08X %08X\n", bytes_sent, bytes_count );
		res = __prodigize_send_data ( buffer, bytes_count + 8 );
   		if ( res != E_OK )
		{
			printf ( "ERROR %i while __prodigize_send_data()\n", res );
			return E_FAIL;
		}


		// read ok signal
		res = __prodigize_read_data ( buffer, 1 );

		if ( buffer[0] != 0x55 )
		{
			printf ( "  [F] Write failed? 0x%02X (this case must not happen!)\n", buffer[0] );
			free ( buffer );
			return E_FAIL;
		}
		
		bytes_sent = bytes_sent + bytes_count;
	}	
	free ( buffer );
	printf ( "  [i] successfully Written!\n" );
}

int do_upload_from_armada ()
{
	int maxsize = 8192;
	unsigned int address = 0x0C0B0410;
	unsigned char *arm_code = NULL;
	unsigned char *buffer = NULL;
	t_workspace *arm_file = WorkspaceStartup ( armadafile );

	address = UiDlgIntDef ( "Upload to address", 0, 0x0FFFFFFF, address );
	if ( address == E_FAIL )
	{
		printf ( "[!] Invalid value\n" );
		return E_FAIL;
	}

	printf ( "\n" );
	printf ( "[x] Hot-uploading and executing ARMada code from\n" );
	printf ( "    file: %s\n", armadafile );
	printf ( "    to  : 0x%08X\n", address );
	printf ( "\n" );
	if ( !arm_file ) 
	{
		printf ( "Failed opening ARMada code\n" );
		return E_FAIL;
	}

	arm_code = strdup ( __v_get_str ( arm_file, 0 ) );
	__workspace_release ( arm_file );

	// maximum size of armada code
	buffer = malloc ( maxsize );
	arm_file = WorkspaceCreateFileFromBuffer ( buffer, maxsize );


	// compile
	if ( __armada_compile ( arm_file, arm_code, 1 ) != E_OK 
			|| __armada_get_patched_bytes () <= 0 )
	{
		printf ( "Failed compiling ARMada code\n" );
		__workspace_release ( arm_file );
		return E_FAIL;
	}

	__util_dump_bytes ( buffer, 0x10, __armada_get_patched_bytes () );
	do_upload_code ( address, __v_get_ptr ( arm_file, 0 ), __armada_get_patched_bytes () );
	__workspace_release ( arm_file );

	execute_code ( address|1 );
}


int do_upload_from_cfile ()
{
	int maxsize = 32768;
	int bytes = 0;
	unsigned int address = 0x0C0B0410;
	unsigned int offset = 0;
	unsigned char *arm_code = NULL;
	unsigned char *buffer = NULL;
	t_workspace *arm_file = NULL;
	object *own_funcs = NULL;

	address = UiDlgIntDef ( "Upload to address", 0, 0x0FFFFFFF, address );
	if ( address == E_FAIL )
	{
		printf ( "[!] Invalid value\n" );
		return E_FAIL;
	}

	printf ( "\n" );
	printf ( "[x] Hot-uploading and executing C-code from\n" );
	printf ( "    file: %s\n", cfile );
	printf ( "    to  : 0x%08X\n", address );
	printf ( "\n" );

	__arm_run_makefile ( "support" );


	own_funcs = __arm_create_object ( "support", "dynamic_code.o" );
	if ( own_funcs )
	{
		buffer = malloc ( maxsize );
		arm_file = WorkspaceCreateFileFromBuffer ( buffer, maxsize );

		arm_file->flags = arm_file->flags & ~FLAGS_ENDIANESS;
		arm_file->flags = arm_file->flags | FLAGS_ENDIANESS_LE;


		bytes = __nokia_create_func2 ( arm_file, own_funcs, 0, address );
		if ( bytes == E_FAIL )
		{
			printf ( "patching failed\n" );
			getchar();
			return -1;
		}
		__util_free_object ( own_funcs );
		
	}
	else
	{
		printf ( "Failed opening C code\n" );
		return E_FAIL;
	}
	
	offset = __symbols_get_address ( NULL, "main" );
	
	if ( offset == E_FAIL )
	{
		printf ( "Failed getting symbol 'main'\n" );
		return E_FAIL;
	}

	printf ( "Address code  : 0x%08X\n", address );	
	printf ( "Offset 'main ': 0x%08X\n", offset );	
	printf ( "Used bytes    : 0x%08X\n", bytes );

	__util_dump_bytes ( buffer, 0x10, bytes );

	do_upload_code ( address, __v_get_ptr ( arm_file, 0 ), bytes );
	__workspace_release ( arm_file );

	execute_code ( offset|1 );
}


int do_upload_from_binary ()
{
	unsigned int address = 0x0C0B0410;
	t_workspace *ws = NULL;

	address = UiDlgIntDef ( "Upload to address", 0, 0x0FFFFFFF, address );
	if ( address == E_FAIL )
	{
		printf ( "[!] Invalid value\n" );
		return E_FAIL;
	}

	printf ( "\n" );
	printf ( "[x] Uploading Binary data\n" );
	printf ( "    file: %s\n", binfile );
	printf ( "    to  : 0x%08X\n", address );
	ws = WorkspaceStartup ( binfile );
	printf ( "    size: 0x%08X\n", __v_get_size ( ws ) );
	printf ( "\n" );

	__util_dump_bytes ( __v_get_ptr ( ws, 0 ), 0x10, __v_get_size ( ws ) );


	do_upload_code ( address, __v_get_ptr ( ws, 0 ), __v_get_size ( ws ) );
	
	__workspace_release ( ws );

}


int do_liveview ( )
{
	char *buffer = NULL;
	int length = read_bytes;
	int address = read_address;
	t_workspace *ws = NULL;

	buffer = malloc ( length + 10 );
	t_workspace *ws = WorkspaceCreateFileFromBuffer ( buffer, length );

	//
	// read memory area
	//
	printf ( "\n" );
	printf ( "[x] Live Memory...\n" );

	if ( read_mem ( buffer, address, length ) != E_OK )
	{
		__ui_dlg_dumpmem_finish (  );
		free ( buffer );
		return E_FAIL;
	}
	
	ws->fileinfo->stages->segments->start = address;
	ws->fileinfo->stages->segments->end = address + length;
	ws->fileinfo->stages->segments->length = length;

	__workspace_update_memmap ( ws );
	__ui_dlg_dumpmem ( ws, address );
	
	while ( __ui_dlg_dumpmem_visible () == E_OK )
	{
		address = __ui_dlg_dumpmem_get_addr ();
		if ( address == E_FAIL )
		{
			printf ( "Invalid address\n" );
			return E_FAIL;
		}
		
		
		if ( read_mem ( buffer, address, length ) != E_OK )
		{
			__ui_dlg_dumpmem_finish (  );
			free ( buffer );
			return E_FAIL;
		}

		ws->fileinfo->stages->segments->start = address;
		ws->fileinfo->stages->segments->end = address + length;
		ws->fileinfo->stages->segments->length = length;
		
		__workspace_update_memmap ( ws );
		__ui_dlg_dumpmem_set_addr ( address );
	
	}
	__ui_dlg_dumpmem_finish (  );
	free ( buffer );
}

int prodigize_main ( )
{
	int repaint = 1;
	int done = 0;
	int command = 0;
	char *menu[] = { "Get UPP ID", "Load 2nd loader", "Load 3rd loader", "Read Mem", "Run function", "Change read address", "Change read bytes", "Scan for memory areas", "Scan for Flashcrypt init", "Dump Memory to file", "Set Byte", "Set Half", "Set Word", "ARMada upload", "GCC code upload", "Binary code/data upload", "Live Memry view" };


	while ( !done )
	{
		command = UiDlgMenu ( "Prodigize Shell", menu, UI_OPT_QUIT | (repaint?0:UI_OPT_NOREPAINT) );
		if ( command == 0 )
			return E_OK;
		repaint = 0;

		switch ( command )
		{
			case E_FAIL:
				repaint = 1;
				break;
			case 0:
				return E_OK;
				break;
			case 1:
				do_get_uppid ();
				break;
			case 2:
				do_load_2nd ();
				break;
			case 3:
				do_load_3rd ();
				break;
			case 4:
				do_read_mem ();
				repaint = 1;
				break;
			case 5:
				do_run_func ();
				break;
			case 6:
				do_change_address ();
				break;
			case 7:
				do_change_bytes ();
				break;
			case 8:
				do_scan_mem ( );
				repaint = 1;
				break;
			case 9:
				do_scan_crypt ( );
				repaint = 1;
				break;
			case 10:
				do_dump_mem ();
				repaint = 1;
				break;
			case 11:
				do_set_byte ();
				repaint = 1;
				break;
			case 12:
				do_set_half ();
				repaint = 1;
				break;
			case 13:
				do_set_word ();
				repaint = 1;
				break;
			case 14:
				do_upload_from_armada ();
				repaint = 1;
				break;
			case 15:
				do_upload_from_cfile ();
				repaint = 1;
				break;
			case 16:
				do_upload_from_binary ();
				repaint = 1;
				break;
			case 17:
				do_change_address ();
				do_liveview ();
				repaint = 1;
				break;
			default:
				break;
		}
	}

	return E_OK;
}


int armulate_main ( )
{
	int repaint = 1;
	int done = 0;
	int command = 0;
	char *menu[] = { "Initialize/Reset Emu", "Change Registers", "Change PC", "Print Registers", "Execute Next instruction", "Step into instruction", "Execute until", "Dump Memory Map", "Dump Memory" };

	if ( !GetWorkspace() )
	{
		UiDlgMsg ( "Sorry, no file loaded", 0 );
		return E_FAIL;
	}

	while ( !done )
	{
		command = UiDlgMenu ( "ARMulate Shell", menu, UI_OPT_QUIT | (repaint?0:UI_OPT_NOREPAINT) );
		if ( command == 0 )
			return E_OK;
		repaint = 0;

		switch ( command )
		{
			case E_FAIL:
				repaint = 1;
				break;
			case 0:
				return E_OK;
				break;
			case 1:
				init_armulate ();
				print_opcode ();
				break;
			case 2:
				dump_regs ();
				change_reg ();
				break;
			case 3:
				change_pc ();
				print_opcode ();
				break;
			case 4:
				dump_regs ();
				break;
			case 5:
				exec_next ();
				break;
			case 6:
				exec_step ();
				break;
			case 7:
				exec_until ();
				break;
			case 8:
				dump_memmap ();
				repaint = 1;
				break;
			case 9:
				dump_memory ();
				repaint = 1;
				break;
			default:
				break;
		}
	}

}



int main ( )
{
	int repaint = 1;
	int done = 0;
	int command = 0;
	char *menu[] = { "Prodigize", "ARMulate" };

	if ( trix_workspace )
		trix_workspace->flags = FLAGS_ENDIANESS_LE;

	if ( !GetWorkspace() )
	{
		UiDlgMsg ( "Sorry, no file loaded", 0 );
		return E_FAIL;
	}

	while ( !done )
	{
		command = UiDlgMenu ( "ARMulate advanced", menu, UI_OPT_QUIT | (repaint?0:UI_OPT_NOREPAINT) );
		if ( command == 0 )
			return E_OK;
		repaint = 0;

		switch ( command )
		{
			case E_FAIL:
				repaint = 1;
				break;
			case 0:
				return E_OK;
				break;
			case 1:
				prodigize_main ();
				repaint = 1;
				break;
			case 2:
				armulate_main ();
				repaint = 1;
				break;
			default:
				break;
		}
	}

}
