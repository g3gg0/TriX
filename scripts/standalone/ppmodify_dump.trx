#include trix

#plugin trix_ppmodify
#plugin trix_xml
#include trix_ppmodify
#include trix_xml


int strncmp ( unsigned char *s1, unsigned char *s2, int length )
{
	int pos = 0;

	if ( !s1 || !s2 )
		return 1;

	while ( pos < length )
	{
		if ( s1[pos] != s2[pos] )
			return 1;
		if ( !s1[pos] || !s2[pos] )
			return 0;
		pos++;
	}
	return 0;
}

int dump_lang_strings ( t_treenode *lang, t_treenode *node )
{
	t_treenode *child = NULL;
	t_treenode *newnode = NULL;
	t_treenode *infonode = NULL;
	unsigned char *workbuffer = NULL;
	int worklength = 0;

	lang = __treenode_get_byname ( __treenode_children ( lang ), "STRINGS" );
	child = __treenode_get_byname ( __treenode_children ( lang ), "STRING" );
	while ( child )
	{
		infonode = __treenode_get_byname ( __treenode_children ( child ), "UTF8" );
		workbuffer = __treenode_get_content_data ( infonode );

		if ( !workbuffer )
			return E_OK;

//		printf ( "Found STRING: '%s'\n", workbuffer );

		newnode = __treenode_addchild ( node );
		__treenode_set_name ( newnode, "STRING" );
		__treenode_set_content_data ( newnode, workbuffer );

		child = __treenode_get_byname ( __treenode_next ( child ), "STRING" );
	}

	return E_OK;
}

int dump_lang_chunk ( t_treenode *lang, t_treenode *node, char *name )
{
	t_treenode *child = NULL;
	t_treenode *newnode = NULL;
	t_treenode *infonode = NULL;
	unsigned char *workbuffer = NULL;
	int worklength = 0;

	child = __treenode_get_byname ( __treenode_children ( lang ), "SUBCHUNK" );
	while ( child )
	{
		infonode = __treenode_get_byname ( __treenode_children ( child ), "INFORMATION" );
			infonode = __treenode_get_byname ( __treenode_children ( infonode ), "NAME" );
			workbuffer = __treenode_get_content_data ( infonode );

		if ( !workbuffer )
			return E_OK;
 

		if ( strlen ( workbuffer ) > 2 && !strncmp ( workbuffer, name, strlen ( name ) ) )
		{
			newnode = __treenode_addchild ( node );
			__treenode_set_name ( newnode, workbuffer );
			dump_lang_strings ( child, newnode );
			printf ( " [i] Dump SUBCHUNK: '%s'\n", workbuffer );
		}
		else
			printf ( " [i] Skip SUBCHUNK: '%s'\n", workbuffer );

		child = __treenode_get_byname ( __treenode_next ( child ), "SUBCHUNK" );
	}

	return E_OK;
}

t_treenode *create_lang_node ( t_treenode *node, unsigned char *language )
{
	t_treenode *child = NULL;
	t_treenode *infonode = NULL;
	t_treenode *newnode = NULL;
	unsigned char *workbuffer = NULL;
	int worklength = 0;

	child = __treenode_get_byname ( __treenode_children ( node ), "PPM" );
	child = __treenode_get_byname ( __treenode_children ( child ), "CHUNK" );
	while ( child )
	{
		infonode = __treenode_get_byname ( __treenode_children ( child ), "INFORMATION" );
			infonode = __treenode_get_byname ( __treenode_children ( infonode ), "NAME" );
			workbuffer = __treenode_get_content_data ( infonode );

		if ( !workbuffer )
			return newnode;

//		printf ( "Found CHUNK: '%s'\n", workbuffer );
		if ( !strcmp ( workbuffer, "TEXT" ) )
		{
			newnode = __treenode_create ();
			__treenode_set_name ( newnode, "LANG" );
			dump_lang_chunk ( child, newnode, language );
		}

		child = __treenode_get_byname ( __treenode_next ( child ), "CHUNK" );
	}

	return newnode;
}

t_treenode *get_text_chunk ( t_treenode *node )
{
	t_treenode *child = NULL;
	t_treenode *infonode = NULL;
	t_treenode *newnode = NULL;
	unsigned char *workbuffer = NULL;
	int worklength = 0;

	child = __treenode_get_byname ( __treenode_children ( node ), "PPM" );
	child = __treenode_get_byname ( __treenode_children ( child ), "CHUNK" );
	while ( child )
	{
		infonode = __treenode_get_byname ( __treenode_children ( child ), "INFORMATION" );
			infonode = __treenode_get_byname ( __treenode_children ( infonode ), "NAME" );
			workbuffer = __treenode_get_content_data ( infonode );

		if ( !workbuffer )
			return NULL;

		if ( !strcmp ( workbuffer, "TEXT" ) )
			return child;

		child = __treenode_get_byname ( __treenode_next ( child ), "CHUNK" );
	}
	
	printf ( "ERROR returning text chunk\n" );
	return NULL;
}

t_treenode *get_lang_chunk ( t_treenode *node, int num )
{
	t_treenode *child = NULL;
	t_treenode *infonode = NULL;
	unsigned char *workbuffer = NULL;
	int pos = 0;
	
	child = get_text_chunk ( node );
	child = __treenode_get_byname ( __treenode_children ( child ), "SUBCHUNK" );
	while ( child )
	{
		infonode = __treenode_get_byname ( __treenode_children ( child ), "INFORMATION" );
			infonode = __treenode_get_byname ( __treenode_children ( infonode ), "NAME" );
			workbuffer = __treenode_get_content_data ( infonode );

		if ( workbuffer && pos == num )
			return child;

		pos++;
		child = __treenode_get_byname ( __treenode_next ( child ), "SUBCHUNK" );
	}

	return NULL;
}

t_treenode *get_lang_entry ( t_treenode *node, int lang, int entry )
{
	t_treenode *child = NULL;
	t_treenode *infonode = NULL;
	unsigned char *workbuffer = NULL;
	int pos = 0;

	child = get_lang_chunk ( node, lang );
	child = __treenode_get_byname ( __treenode_children ( child ), "STRINGS" );
	child = __treenode_get_byname ( __treenode_children ( child ), "STRING" );
	while ( child )
	{
		if ( pos == entry )
			return child;

		pos++;
		child = __treenode_get_byname ( __treenode_next ( child ), "STRING" );
	}

	return NULL;
}


int append_ppm_string ( t_treenode *mainnode, unsigned char *what )
{
	int lang = 1;
	t_treenode *child = NULL;
	t_treenode *newnode = NULL;
	t_treenode *subnode = NULL;

	child = get_lang_entry ( mainnode, lang, 0 );
	while ( child )
	{
		// just create UTF8 string
		newnode = __treenode_append ( child );
		__treenode_set_name ( newnode, "STRING" );
		subnode = __treenode_addchild ( newnode );
		__treenode_set_name ( subnode, "UTF8" );
		__treenode_set_content_data ( subnode, what );
		
//		printf ( " [i]  lang chunk %i: APPEND -> '%s'\n", lang, what );
		lang++;
		child = get_lang_entry ( mainnode, lang, 0 );
	}
	return E_OK;
}

int insert_ppm_string ( t_treenode *mainnode, int pos, unsigned char *what )
{
	int lang = 1;
	t_treenode *child = NULL;
	t_treenode *newnode = NULL;
	t_treenode *subnode = NULL;

	child = get_lang_entry ( mainnode, lang, pos );
	while ( child )
	{
		// just create UTF8 string
		newnode = __treenode_insert_before ( child );
		__treenode_set_name ( newnode, "STRING" );
		subnode = __treenode_addchild ( newnode );
		__treenode_set_name ( subnode, "UTF8" );
		__treenode_set_content_data ( subnode, what );
		
//		printf ( " [i]  lang chunk %i: INSERT -> '%s'\n", lang, what );
		lang++;
		child = get_lang_entry ( mainnode, lang, pos );
	}
	return E_OK;
}


int update_ppm_string ( t_treenode *mainnode, int pos, unsigned char *what )
{
	int lang = 1;
	t_treenode *child = NULL;
	t_treenode *node = NULL;

	child = get_lang_entry ( mainnode, lang, pos );
	while ( child )
	{
		// free UTF16 and TOKEN so string will get recreated
		node = __treenode_get_byname ( __treenode_children ( child ), "UTF16" );
		__treenode_release ( node );
		node = __treenode_get_byname ( __treenode_children ( child ), "TOKEN" );
		__treenode_release ( node );
		
		node = __treenode_get_byname ( __treenode_children ( child ), "UTF8" );
//		printf ( " [i]  lang chunk %i: '%s' -> '%s'\n", lang, __treenode_get_content_data ( node ), what );
		__treenode_set_content_data ( node, what );
		
		lang++;
		child = get_lang_entry ( mainnode, lang, pos );
	}
	return E_OK;
}


int remove_ppm_string ( t_treenode *mainnode, int pos )
{
	int lang = 1;
	t_treenode *child = NULL;
	t_treenode *node = NULL;

	child = get_lang_entry ( mainnode, lang, pos );
	while ( child )
	{
		node = __treenode_get_byname ( __treenode_children ( child ), "UTF8" );
//		printf ( " [i]  lang chunk %i: '%s' -> FREE\n", lang, __treenode_get_content_data ( node ) );
		
		__treenode_release ( child );
		
		lang++;
		child = get_lang_entry ( mainnode, lang, pos );
	}
	return E_OK;
}

#define NONE   0
#define INSERT 1
#define UPDATE 2
#define REMOVE 3
#define APPEND 4


int compare_lang_node ( t_treenode *refnode, t_treenode *modnode, t_treenode *ppmnode )
{
	t_treenode *child_ref = NULL;
	t_treenode *child_mod = NULL;
	unsigned char *workbuffer_ref = NULL;
	unsigned char *workbuffer_mod = NULL;
	unsigned char *what = NULL;
	int pos = 0;
	int action = 0;

	if ( !refnode )
	{
		printf ( "[E] no refnode\n" );
		return E_FAIL;
	}
	if ( !modnode )
	{
		printf ( "[E] no modnode\n" );
		return E_FAIL;
	}
	if ( !ppmnode )
	{
		printf ( "[E] no ppmnode\n" );
		return E_FAIL;
	}

	child_ref = __treenode_get_byname ( refnode, "LANG" );
	child_ref = __treenode_children ( child_ref );
	child_ref = __treenode_get_byname ( __treenode_children ( child_ref ), "STRING" );

	child_mod = __treenode_get_byname ( modnode, "LANG" );
	child_mod = __treenode_children ( child_mod );
	child_mod = __treenode_get_byname ( __treenode_children ( child_mod ), "STRING" );

	if ( !child_ref )
	{
		printf ( "[E] no child_ref\n" );
		return E_FAIL;
	}
	if ( !child_mod )
	{
		printf ( "[E] no child_mod\n" );
		return E_FAIL;
	}	
	
	while ( child_mod )
	{
		action = NONE;
		workbuffer_ref = __treenode_get_content_data ( child_ref );
		workbuffer_mod = __treenode_get_content_data ( child_mod );

		if ( !workbuffer_mod )
		{
			printf ( "Structure error 2\n",  );
			return E_FAIL;
		}

		if ( !workbuffer_ref || strcmp ( workbuffer_ref, workbuffer_mod ) )
		{
			printf ( " [i]  Pos: %04i ", pos );
			
			if ( workbuffer_mod[0] == '+' && workbuffer_ref )
			{
				printf ( "INSERT '%s'\n", workbuffer_mod + 1 );
				action = INSERT;
				what = workbuffer_mod + 1;
			}
			else if ( workbuffer_mod[0] == '+' )
			{
				printf ( "APPEND '%s'\n", workbuffer_mod + 1 );
				action = APPEND;
				what = workbuffer_mod + 1;
			}
			else if ( workbuffer_mod[0] == '#' )
			{
				printf ( "UPDATE '%s' <> '%s'\n", workbuffer_ref, workbuffer_mod + 1 );
				action = UPDATE;
				what = workbuffer_mod + 1;
			}
			else if ( workbuffer_ref && workbuffer_ref[0] == '-' )
			{
				printf ( "REMOVE '%s'\n", workbuffer_ref + 1 );
				action = REMOVE;
				what = NULL;
			}
			else
			{
				printf ( "[?] DIFF   '%s' <> '%s'\n", workbuffer_ref, workbuffer_mod );
			}
		}
		
		switch ( action )
		{
			case APPEND:
				append_ppm_string ( ppmnode, what );
				break;
			case INSERT:
				insert_ppm_string ( ppmnode, pos, what );
				break;
			case UPDATE:
				update_ppm_string ( ppmnode, pos, what );
				break;
			case REMOVE:
				remove_ppm_string ( ppmnode, pos );
				break;
			case NONE:
			default:
				break;
				
		}

		if ( action != REMOVE )
			pos++;
			
		if ( action == NONE || action == REMOVE || action == UPDATE )
		{
			if ( !child_ref )
			{
				printf ( "[E] Structure error 2\n",  );
				return E_FAIL;
			}
			
			child_ref = __treenode_get_byname ( __treenode_next ( child_ref ), "STRING" );
		}
		if ( action != REMOVE )
			child_mod = __treenode_get_byname ( __treenode_next ( child_mod ), "STRING" );
	}
	
	return E_OK;
}

int import_lang_node ( t_treenode *refnode, t_treenode *modnode, t_treenode *ppmnode )
{
	t_treenode *child_ref = NULL;
	t_treenode *child_mod = NULL;
	unsigned char *workbuffer_ref = NULL;
	unsigned char *workbuffer_mod = NULL;
	unsigned char *what = NULL;
	int pos = 0;
	int action = 0;
	
	if ( !refnode )
	{
		printf ( "[E] no refnode\n" );
		return E_FAIL;
	}
	if ( !modnode )
	{
		printf ( "[E] no modnode\n" );
		return E_FAIL;
	}
	if ( !ppmnode )
	{
		printf ( "[E] no ppmnode\n" );
		return E_FAIL;
	}

	child_ref = __treenode_get_byname ( refnode, "LANG" );
	child_ref = __treenode_children ( child_ref );
	child_ref = __treenode_get_byname ( __treenode_children ( child_ref ), "STRING" );

	child_mod = __treenode_get_byname ( modnode, "LANG" );
	child_mod = __treenode_children ( child_mod );
	child_mod = __treenode_get_byname ( __treenode_children ( child_mod ), "STRING" );

	if ( !child_ref )
	{
		printf ( "[E] no child_ref\n" );
		return E_FAIL;
	}
	if ( !child_mod )
	{
		printf ( "[E] no child_mod\n" );
		return E_FAIL;
	}	
	
	while ( child_mod )
	{
		action = NONE;
		workbuffer_ref = __treenode_get_content_data ( child_ref );
		workbuffer_mod = __treenode_get_content_data ( child_mod );

		if ( !workbuffer_ref || !workbuffer_mod )
		{
			printf ( "[E] Structure error 2\n",  );
			return E_FAIL;
		}

		if ( strcmp ( workbuffer_ref, workbuffer_mod ) )
		{
			printf ( " [i] Pos: %04i ", pos );
			
			printf ( " [i] UPDATE '%s' -> '%s'\n", workbuffer_ref, workbuffer_mod );
			action = UPDATE;
			what = workbuffer_mod;
		}
		
		switch ( action )
		{
			case UPDATE:
				update_ppm_string ( ppmnode, pos, what );
				break;
			case NONE:
			default:
				break;
		}

		pos++;
			
		child_ref = __treenode_get_byname ( __treenode_next ( child_ref ), "STRING" );
		child_mod = __treenode_get_byname ( __treenode_next ( child_mod ), "STRING" );
		
		if ( !child_ref && child_mod )
		{
			printf ( "[E] PPM contains less strings than given string file\n" );
			return E_FAIL;
		}
		if ( !child_mod && child_ref )
		{
			printf ( "[E] PPM contains more strings than given string file\n" );
			return E_FAIL;
		}	
	}
	
	return E_OK;
}

int main ( )
{
	int endianess_le = 0;
	int selection = 0;
	unsigned char *xml_data;
	int start;
	char *hexstr = NULL;
	unsigned int err = 0;
	char *filename_1 = NULL;
	char *filename_2 = NULL;
	char *filename_3 = NULL;
	char *filename_4 = NULL;
	char *option = NULL;
	t_treenode * mainnode = NULL;
	t_treenode * langnode = NULL;

	t_treenode * refnode = NULL;
	t_treenode * modnode = NULL;

	int done = 0;
	int command = 0;
	char *menu[] = { "Dump loaded file to XML", "Load XML file into Workspace", "Dump Language", "Import Language", "Compare Dumped Langs", "Swich endianess", "Dump loaded file to XML (custom start addr)", "Load XML file into Workspace (custom start addr)" };
	
	say ( "PPM<->XML script - Customize your PPM\n" );
	say ( "\n" );
	
	if ( GetWorkspace() == NULL )
	{
		say ( "please load a PPM file as MCU,\n" );
		say ( "even if you want to create a new from XML.\n" );
		return -1;
	}
	
	while ( 1 )
	{
	command = UiDlgMenu ( "PPModify Dump", menu, UI_OPT_QUIT );
	start = __v_get_start ( GetWorkspace () );


	switch ( command )
	{
		case E_FAIL:
			break;
		case 0:
			return E_OK;
			break;
		case 7:
			UiDlgString ( "PPM start address (hex)?", &hexstr );
			if ( !hexstr )
			{
				say ( "address has wrong syntax\n" );
				return -1;
			}
				
			start = __util_hex_get ( hexstr, &err );
			if ( err )
			{
				say ( "address has wrong syntax\n" );
				return -1;
			}
			
		case 1:
			UiDlgString ( "Enter xml output filename", &filename_1 );
			if ( filename_1 == NULL )
			{
				say ( "error getting filename\n" );
				return -1;
			}
			printf ( "Dumping...\n" );
			mainnode = __ppmodify_dump_xml ( GetWorkspace(), start );
			if ( mainnode == NULL )
			{
				say ( "could not create treenode data from ppm\n" );
				return -1;
			}
			printf ( "Saving...\n" );
			if ( __xml_connector_create_file ( mainnode, filename_1, "ppm_strings.xsl" ) == E_FAIL )
			{
				say ( "could not create XML file from treenode data...\n" );
				__treenode_release ( mainnode );
				return -1;
			}
			printf ( "dumped PPM to %s! Modify it and run this script again.\n", filename_1 );
			__treenode_release ( mainnode );
			break;

		case 8:
			UiDlgString ( "PPM start address (hex)?", &hexstr );
			if ( !hexstr )
			{
				say ( "address has wrong syntax\n" );
				return -1;
			}
				
			start = __util_hex_get ( hexstr, &err );
			if ( err )
			{
				say ( "address has wrong syntax\n" );
				return -1;
			}
		case 2:
			UiDlgString ( "Enter xml input filename", &filename_1 );
			if ( filename_1 == NULL )
			{
				say ( "error getting filename\n" );
				return -1;
			}
			printf ( "Reading...\n" );
			mainnode = __xml_connector_parse_file ( filename_1 );
			if ( mainnode == NULL )
			{
				say ( "could not parse XML file\n" );
				return -1;
			}
			printf ( "Building...\n" );
			if ( __ppmodify_build_ppm ( GetWorkspace(), start,
			__v_get_size( GetWorkspace () ), mainnode ) == E_FAIL )
			{
				say ( "could not create PPM...\n" );
				__treenode_release ( mainnode );
				return -1;
			}
			printf ( "loaded %s and built PPM from it.\n", filename_1 );
			__treenode_release ( mainnode );
			return E_OK;
			break;

		case 3:
			UiDlgString ( "Enter PPM xml input filename", &filename_1 );
			if ( filename_1 == NULL )
			{
				say ( "error getting filename\n" );
				return -1;
			}
			UiDlgString ( "Enter STRINGS xml output filename", &filename_2 );
			if ( filename_2 == NULL )
			{
				say ( "error getting filename\n" );
				return -1;
			}
			UiDlgString ( "Enter LANG to dump", &option );
			if ( option == NULL )
			{
				say ( "error getting language\n" );
				return -1;
			}
			
			printf ( "Reading...\n" );
			mainnode = __xml_connector_parse_file ( filename_1 );

			if ( !mainnode )
			{
				printf ( "Failed loading XML file 1\n" );
				return E_FAIL;
			}
		
			printf ( "Building...\n" );
			langnode = create_lang_node ( mainnode, option );
			printf ( "Saving...\n" );
			__xml_connector_create_file ( langnode, filename_2, NULL );
	
			__treenode_release ( mainnode );
			__treenode_release ( langnode );
			break;
			
		case 4:
			UiDlgString ( "Enter PPM xml input filename", &filename_1 );
			if ( filename_1 == NULL )
			{
				say ( "error getting filename\n" );
				return -1;
			}
			UiDlgString ( "Enter STRINGS xml input filename", &filename_2 );
			if ( filename_2 == NULL )
			{
				say ( "error getting filename\n" );
				return -1;
			}
			UiDlgString ( "Enter LANG to import", &option );
			if ( option == NULL )
			{
				say ( "error getting language\n" );
				return -1;
			}
			UiDlgString ( "Enter PPM xml output filename", &filename_3 );
			if ( filename_3 == NULL )
			{
				say ( "error getting filename\n" );
				return -1;
			}
			
			printf ( "Reading 1/2...\n" );
			mainnode = __xml_connector_parse_file ( filename_1 );

			if ( !mainnode )
			{
				printf ( "Failed loading XML file 1\n" );
				return E_FAIL;
			}
			
			printf ( "Reading 2/2...\n" );
			modnode = __xml_connector_parse_file ( filename_2 );

			if ( !mainnode )
			{
				printf ( "Failed loading XML file 2\n" );
				return E_FAIL;
			}
		
			printf ( "Building 1/2...\n" );
			refnode = create_lang_node ( mainnode, option );
			
			printf ( "Building 2/2...\n" );
			import_lang_node ( refnode, modnode, mainnode );
			
			printf ( "Saving...\n" );
			__xml_connector_create_file ( mainnode, filename_3, NULL );
	
			__treenode_release ( mainnode );
			__treenode_release ( refnode );
			__treenode_release ( modnode );
			break;
			
		case 5:
			UiDlgString ( "Enter xml filename of langdump reference", &filename_1 );
			if ( filename_1 == NULL )
			{
				say ( "error getting filename\n" );
				return -1;
			}
			UiDlgString ( "Enter xml filename of langdump modified", &filename_2 );
			if ( filename_2 == NULL )
			{
				say ( "error getting filename\n" );
				return -1;
			}
			
			UiDlgString ( "Enter xml filename of PPM input file", &filename_3 );
			if ( filename_3 == NULL )
			{
				say ( "error getting filename\n" );
				return -1;
			}

			UiDlgString ( "Enter xml filename of PPM output file", &filename_4 );
			if ( filename_4 == NULL )
			{
				say ( "error getting filename\n" );
				return -1;
			}
			
			printf ( "Reading 1/3...\n" );
			refnode = __xml_connector_parse_file ( filename_1 );

			if ( !refnode )
			{
				printf ( "Failed loading XML file 1\n" );
				return E_FAIL;
			}

			printf ( "Reading 2/3...\n" );
			modnode = __xml_connector_parse_file ( filename_2 );

			if ( !modnode )
			{
				printf ( "Failed loading XML file 2\n" );
				return E_FAIL;
			}
		
			printf ( "Reading 3/3...\n" );
			mainnode = __xml_connector_parse_file ( filename_3 );

			if ( !mainnode )
			{
				printf ( "Failed loading XML file 3\n" );
				return E_FAIL;
			}
		
			printf ( "Comparing...\n" );
			compare_lang_node ( refnode, modnode, mainnode );

			printf ( "Saving...\n" );
			__xml_connector_create_file ( mainnode, filename_4, NULL );

			__treenode_release ( refnode );
			__treenode_release ( modnode );
			__treenode_release ( mainnode );
			break;

		case 6:
			endianess_le = (endianess_le+1)%2;
			printf ( "Selected %s mode\n", endianess_le?"LE":"BE" );
			
			GetWorkspace()->flags = GetWorkspace()->flags & ~FLAGS_ENDIANESS;
			if ( endianess_le )
				GetWorkspace()->flags = GetWorkspace()->flags | FLAGS_ENDIANESS_LE;
			else
				GetWorkspace()->flags = GetWorkspace()->flags | FLAGS_ENDIANESS_BE;
			break;

		default:
	}
	}	
	__treenode_release ( mainnode );
	return 0;
	
	
	return E_OK;
}
