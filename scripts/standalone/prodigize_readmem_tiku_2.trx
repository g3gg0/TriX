#include trix

#plugin trix_prodigize
#include trix_prodigize

char *u_2nd = "C:\\Programme\\Nokia\\Phoenix_2003.37.0.41\\flash\\te_2nd.fia";
char *u_3rd = "C:\\Programme\\Nokia\\Phoenix_2003.37.0.41\\flash\\te_rd_extended.fia";
unsigned int read_address = 0x08000000;
unsigned int read_bytes = 0x40;



int show_flash_info ( unsigned char *data )
{
	int pos = 0;
	int done = 0;
	int fl_num = 0;
	int fl_id = 0;
	int fl_start = 0;

	while ( !done )
	{
		fl_start = (data[pos+2]) & 0xFF;
		fl_id = (data[pos+4] << 24) | (data[pos+3] << 16) | (data[pos+6] << 8) | data[pos+5];
		fl_num++;
		pos += 11;

		if ( fl_id != 0x00000001 )
			printf ( "  [i] Flash %i: %08X at 0x%02X000000\n", fl_num, fl_id, fl_start );
		else
			done = 1;
	}
	return E_OK;
}

unsigned char neg_checksum ( unsigned char *buffer, unsigned char bytes )
{
   unsigned char i = 0;
	unsigned char k = 0xFF;

   for(i=0; i<bytes; i++)
      k = k - buffer[i];

   return k;
}



unsigned short pos_checksum ( unsigned char *buffer, unsigned char bytes )
{
   unsigned char i = 0;
	unsigned short k = 0;

   for ( i=0; i < bytes; i++)
		k = k + buffer[i];

   return k;
}


int read_mem ( unsigned char *buffer, unsigned int address, unsigned char bytes )
{
   unsigned char cmd[7];
	unsigned char i = 0;
   unsigned short res = 0;
   unsigned int chk = 0;
	unsigned int orchk = 0;

   if ( bytes > 253 )
     return false;

   cmd[0] = 0x15;
   cmd[1] = (unsigned char)(address >> 24 );
   cmd[2] = (unsigned char)(address >> 16 );
   cmd[3] = (unsigned char)(address >>  8 );
   cmd[4] = (unsigned char)(address & 0xFF);
   cmd[5] = bytes;
   cmd[6] = neg_checksum ( cmd + 1, 5 );


   // send command
   res = __prodigize_send_data ( cmd, 7 );
   if(res)
   {
		printf ( "ERROR %i while __prodigize_send_data()\n", res );
		return E_FAIL;
   }

   // add 16 bit chksum
   bytes = bytes + 2;

   // read block
   res = __prodigize_read_data ( buffer, bytes );
   if(res)
   {
		printf ( "ERROR %i while __prodigize_read_data()\n", res );
		return E_FAIL;
   }

	chk = pos_checksum ( buffer, bytes-2);
   orchk = (buffer[bytes-2] << 8) | buffer[bytes-1];

   // test chksum
   if ( chk != orchk )
		printf ( "checksum failed! %02X bytes read\n calced: %04X\n said  : %04X\n", bytes, chk, orchk );

   return E_OK;
}


unsigned char *load_loader ( unsigned char *name, int *length )
{
	t_workspace *ws = NULL;
	int start = 0;

	if ( !name )
		return NULL;
	ws = WorkspaceStartup  ( name );
	if ( !ws )
	{
		printf ( "  [F] unable to open '%s'\n", name );
		return NULL;
	}

	if ( __v_get_b(ws, 0) != 0xA0 && __v_get_b(ws, 0) != 0xA1 )
 	{
		printf ( "  [F] invalid loader '%s'\n", name );
		return NULL;
	}

	start = __v_get_w ( ws, 1 );
	*length = __v_get_size ( ws ) - (start+5);

	printf ( "  [i] loader type %02X, %i bytes\n", __v_get_b(ws, 0), *length );


	return __v_get_ptr ( ws, start+5 );

}


int do_get_uppid ( )
{
	char buffer[1024];

	int length = 0;
	unsigned char *loader = NULL;


	//
	// initialize phone and get UPP ID
	//
	printf ( "[x] Init Phone and check UPP ID...\n" );
	if ( __prodigize_check_bootrom ( buffer ) != E_OK )
		return E_FAIL;

	printf ( "  [i] UPP ID: %02X %02X\n", buffer[1], buffer[2] );

	return E_OK;
}

int do_load_2nd ( )
{
	char buffer[1024];

	int length = 0;
	unsigned char *loader = NULL;

	//
	// open second loader and upload
	//
	printf ( "\n" );
	printf ( "[x] Load 2nd loader...\n" );

	loader = load_loader ( u_2nd, &length );
	if ( !loader )
		return E_FAIL;

	if ( __prodigize_boot_2nd ( buffer, loader, length ) != E_OK )
		return E_FAIL;

	show_flash_info ( buffer );

	return E_OK;
}

int do_load_3rd ( )
{
	char buffer[1024];

	int length = 0;
	unsigned char *loader = NULL;


	//
	// open third loader and upload
	//
	printf ( "\n" );
	printf ( "[x] Load 3rd loader...\n" );
	loader = load_loader ( u_3rd, &length );
	if ( !loader )
		return E_FAIL;

	if ( __prodigize_boot_3rd ( loader, length ) != E_OK )
		return E_FAIL;

	return E_OK;
}

int do_read_mem ( )
{
	char buffer[1024];

	int length = 0;
	unsigned char *loader = NULL;


	//
	// read memory area
	//
	printf ( "\n" );
	printf ( "[x] Read Memory...\n" );
	if ( read_mem ( buffer, read_address, read_bytes ) != E_OK )
		return E_FAIL;


	printf ( "\n" );
	printf ( "[x] Dumping 0x%02X bytes from 0x%08X:\n", read_bytes, read_address );
	printf ( "---------------------------------------------------------------\n" );
	__util_dump_bytes ( buffer, 0x10, read_bytes );
	printf ( "---------------------------------------------------------------\n" );

}

int do_change_bytes ()
{
	int length = 0;

	length = UiDlgInt ( "How many bytes? (0-0xF8)", 0, 0xF8 );
	if ( length == E_FAIL )
		return E_FAIL;

	read_bytes = length;
	return E_OK;
}

int do_change_address ()
{
	char *addr = NULL;
	int address = 0;
	int length = 0;
	int err = 0;

	addr = malloc ( 16 );
	sprintf ( addr, "0x%08X", read_address );

	UiDlgString ( "Which address? In hexadecimal form, please.", &addr );
	if ( !addr )
		return E_FAIL;

	err = 0;
	address = __util_hex_get ( addr, &err );
	if ( err )
		return E_FAIL;

	read_address = address;

	return E_OK;
}


int do_run_func ()
{
   unsigned char buffer[1];
   unsigned char cmd[5];
   unsigned short res = 0;
	char *addr = NULL;
	int address = 0;
	int length = 0;
	int err = 0;
	int loop_count = 1;

	addr = malloc ( 16 );
	sprintf ( addr, "0x%08X", read_address );

	UiDlgString ( "Which address to execute? In hexadecimal form, please.", &addr );
	if ( !addr )
		return E_FAIL;

	err = 0;
	address = __util_hex_get ( addr, &err );
	if ( err )
		return E_FAIL;


   cmd[0] = 0x16;
   cmd[1] = (unsigned char)(address >> 24 );
   cmd[2] = (unsigned char)(address >> 16 );
   cmd[3] = (unsigned char)(address >>  8 );
   cmd[4] = (unsigned char)(address & 0xFF);


   // send command
	printf ( "[x] Executing 0x%08X\n", address );
   res = __prodigize_send_data ( cmd, 5 );
   if(res)
   {
		printf ( "  [F] execute failed! phone has locked up\n" );
		return E_FAIL;
   }


   // read ok signal
   res = __prodigize_read_data ( buffer, 1 );

   if ( buffer[0] != 0x55 )
		printf ( "  [F] execute failed? (this case must not happen!)\n" );
	else
		printf ( "  [i] successfully executed!\n" );
	


	return E_OK;
}


int main ( )
{
	int repaint = 1;
	int done = 0;
	int command = 0;
	char *menu[] = { "Get UPP ID", "Load 2nd loader", "Load 3rd loader", "Read Mem", "Run function", "Change read address", "Change read bytes" };

	while ( !done )
	{
		command = UiDlgMenu ( "Prodigize Shell", menu, UI_OPT_QUIT | (repaint?0:UI_OPT_NOREPAINT) );
		if ( command == 0 )
			return E_OK;
		repaint = 0;

		switch ( command )
		{
			case E_FAIL:
				repaint = 1;
				break;
			case 0:
				return E_OK;
				break;
			case 1:
				do_get_uppid ();
				break;
			case 2:
				do_load_2nd ();
				break;
			case 3:
				do_load_3rd ();
				break;
			case 4:
				do_read_mem ();
				repaint = 1;
				break;
			case 5:
				do_run_func ();
				break;
			case 6:
				do_change_address ();
				break;
			case 7:
				do_change_bytes ();
				break;
			default:
				break;
		}
	}

	return E_OK;
}
