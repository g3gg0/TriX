
int g_mem_init_dump ( unsigned int address )
{
	unsigned int src = 0;
	unsigned int dst = 0;
	unsigned int len = 0;

	unsigned int search = 0x74D;

	do
	{
		src = GetWord ( address );
		dst = GetWord ( address + 4 );
		len = GetWord ( address + 8 );

		if ( dst )
		{
			if ( dst <= search && dst + len >= search )
				printf ( "0x%08X -> 0x%08X\n", search, src + (search - dst)  );
			address += 0x0C;
			printf ( "0x%08X -> 0x%08X   length: 0x%04X\n", src, dst, len );
		}
	} while ( dst );

	return 0;
}


unsigned int g_find_test_table ( )
{
	unsigned int pos = 0;
	unsigned int offset = SimpleFindPattern ( "_TEST\x00ST_", "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF", 9, 0 );

	if ( offset != E_FAIL )
	{
		offset += 6;
		printf ( "[Test Table] \"_TASK\" Pattern found at 0x%08X\n", offset - 6 );

		pos = __v_get_start ( trix_workspace );

		while ( Valid ( pos ) )
		{
			if ( GetWord ( pos ) == offset )
			{
				printf ( "[Test Table] Test table found at 0x%08X\n", pos - 0x14 );
				return pos - 0x14;
			}
			pos++;

			while ( pos & 0x03 && pos != E_FAIL )
				pos = __v_get_next_offset ( trix_workspace, pos );
		}
		printf ( "[Test Table] No Ref to \"*_TEST\" Pattern found\n" );

	}
	printf ( "[Test Table] Table not found\n" );
	return E_FAIL;
}


unsigned int g_find_task_table ( int entries )
{
	unsigned int pos = 0;
	int offset = 0;
	int entry = 0;

	printf ( "[Task Table] Searching for a %i entry function table...\n", entries );
	pos = __v_get_start ( trix_workspace );

	while ( Valid ( pos ) )
	{
		offset = 0;
		while ( offset < entries && 
				Valid ( pos + offset*0x0C ) &&
				Valid ( pos + offset*0x0C + 4 ) &&
				Valid ( pos + offset*0x0C + 8 ) &&
				Valid ( GetWord ( pos + offset*0x0C )) && 
				GetWord ( pos + offset*0x0C + 4 ) < 0x0000FFFF &&
				(offset == (entries - 1) || GetWord ( pos + offset*0x0C + 8 ) != 0xFF000000) )
		{
//			printf ( "0x%08X ", pos + offset*0x0C );
			offset++;
		}
//		printf ( "\n" );

		if ( offset == entries )
		{
//			printf ( "[Task Table] candidate found at 0x%08X\n", pos );
			if ( GetWord ( pos + (offset-1)*0x0C + 8 ) == 0xFF000000 )
			{
				printf ( "[Task Table] Task table found at 0x%08X\n", pos );
				return pos;
			}
		}

		pos++;

		while ( pos & 0x03 && pos != E_FAIL )
			pos = __v_get_next_offset ( trix_workspace, pos );
	}
	printf ( "[Task Table] not found\n" );

	return E_FAIL;
}


unsigned int g_find_task_names ( )
{
	int old_type = 0;
	unsigned int pos = 0;
	unsigned int offset = SimpleFindPattern ( "OS_INTERRUPT_HANDLER\x00", NULL, 21, 0 );

	// first check for 8310 type
	if ( offset != E_FAIL )
		old_type = 1;
	else
		offset = SimpleFindPattern ( "_TASK\x00", "\xFF\xFF\xFF\xFF\xFF\xFF", 6, 0 );

	if ( offset != E_FAIL )
	{
		if ( !old_type )
			offset += 6;
		printf ( "[Task Names] \"_TASK\" Pattern found at 0x%08X\n", offset - 6 );

		pos = __v_get_start ( trix_workspace );

		while ( Valid ( pos ) )
		{
			if ( GetWord ( pos ) == offset )
			{
				if ( !old_type )
					pos -= 4;

				printf ( "[Task Names] Task name table found at 0x%08X\n", pos );
				return pos;
			}
			pos++;

			while ( pos & 0x03 && pos != E_FAIL )
				pos = __v_get_next_offset ( trix_workspace, pos );
		}
		printf ( "[Task Names] No Ref to \"*_TASK\" Pattern found\n" );

	}
	printf ( "[Task Names] Table not found\n" );
	return E_FAIL;
}

int g_get_task_count ( unsigned int table )
{
	int count = 0;

	while ( Valid ( GetWord ( table ) ) &&
			GetStrLen ( GetWord ( table ) ) > 5 &&
			GetStrLen ( GetWord ( table ) ) < 25 )
	{
//		printf ( "%s ", GetStr ( GetWord ( table ) ) );
		table += 4;
		count++;
	}

	return count;
			
}

int g_test_dump ( )
{
	unsigned int test = 0;
	unsigned int name = 0;
	unsigned int handler = 1;
	int num = 0;

	test = g_find_test_table ( );
	if ( test == E_FAIL )
		return E_FAIL;

	while ( handler != 0x0000000 )
	{
		handler = GetWord ( test );
		name = GetWord ( test + 0x04 );
		if ( handler )
		{
			printf ( "    MakeDword ( 0x%08X );\n", test  );
			printf ( "    MakeDword ( 0x%08X );\n", test + 4 );
			printf ( "    SetType ( 0x%08X, \"char *handler;\" );\n", test );
			printf ( "    SetType ( 0x%08X, \"char *name;\" );\n", test + 4 );
			printf ( "    MakeDword ( 0x%08X );\n", test + 8 );
			printf ( "    MakeDword ( 0x%08X );\n", test + 0x0c );
			printf ( "    MakeFunction ( 0x%08X, BADADDR );\n", handler & ~0x0000001 );
			printf ( "    MakeName ( 0x%08X, \"%s\" );\n", handler & ~0x0000001, GetStr ( name ) );
			num++;
		}
		test += 0x10;
	}
	return 1;
}

int g_task_dump ( )
{
	unsigned int names = 0;
	unsigned int tasks = 0;
	unsigned int handler = 0;
	unsigned int parm = 0;
	unsigned int stack = 0;
	int num = 0;

	names = g_find_task_names ();
	if ( names == E_FAIL )
		return E_FAIL;

	tasks = g_find_task_table ( g_get_task_count ( names ) );
	if ( tasks == E_FAIL )
		return E_FAIL;

	

	while ( parm != 0xFF000000 )
	{
		handler = GetWord ( tasks );
		stack = GetWord ( tasks + 0x04 );
		parm = GetWord ( tasks + 0x8 );
		printf ( "    MakeDword ( 0x%08X );\n", tasks );
		printf ( "    MakeDword ( 0x%08X );\n", tasks + 4 );
		printf ( "    MakeDword ( 0x%08X );\n", tasks + 8 );
		printf ( "    SetType ( 0x%08X, \"char *handler;\" );\n", tasks );
		printf ( "    MakeFunction ( 0x%08X, BADADDR );\n", handler & ~0x0000001 );
		printf ( "    MakeName ( 0x%08X, \"%s\" );\n", handler & ~0x0000001, GetStr ( GetWord ( 4*num + names ) ) );
		num++;
		tasks += 0x0C;
	}
	return 1;
}